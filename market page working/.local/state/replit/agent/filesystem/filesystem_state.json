{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MarketPro\n\n## Overview\n\nThis is a professional stock market trading platform built with a full-stack TypeScript architecture. The application provides real-time stock data visualization, market indices tracking, and portfolio management capabilities. It features a React frontend with shadcn/ui components and an Express.js backend with PostgreSQL database integration using Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for fast development and building\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Build Tool**: Vite with custom configuration for development and production\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints for stock data, market indices, and watchlist management\n- **Development**: tsx for TypeScript execution in development\n- **Production**: esbuild for bundling the server application\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with connection pooling\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Shared schema definitions between client and server\n- **Migration System**: Drizzle Kit for database migrations\n- **Development Storage**: In-memory storage implementation for rapid prototyping\n\n### Authentication and Authorization\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **Future-Ready**: User system architecture prepared for implementation\n- **Security**: CORS and security headers configured for production deployment\n\n### Data Sources and APIs\n- **Primary**: Polygon.io API for comprehensive stock market data\n- **Fallback**: Yahoo Finance API for additional market coverage\n- **AI Integration**: OpenAI GPT integration for stock analysis and intelligent search\n- **Real-time Updates**: Scheduled data refresh mechanisms with error handling\n\n### Component Architecture\n- **Design System**: Consistent component library with variants and themes\n- **Accessibility**: ARIA-compliant components with keyboard navigation\n- **Responsive Design**: Mobile-first approach with breakpoint-based layouts\n- **Performance**: Lazy loading and code splitting for optimal bundle sizes\n\n### Development Experience\n- **Type Safety**: End-to-end TypeScript with shared type definitions\n- **Hot Reload**: Vite HMR for instant development feedback\n- **Error Handling**: Runtime error overlays and comprehensive error boundaries\n- **Code Quality**: ESLint and Prettier integration for consistent code style\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Connection**: PostgreSQL-compatible connection string configuration\n\n### Financial Data APIs\n- **Polygon.io**: Primary source for real-time and historical stock market data\n- **Yahoo Finance**: Secondary data source for market indices and quotes\n- **API Integration**: Robust error handling and fallback mechanisms\n\n### AI and Machine Learning\n- **OpenAI**: GPT-5 integration for stock analysis and intelligent search features\n- **Use Cases**: Sentiment analysis, stock recommendations, and natural language search\n\n### UI and Design\n- **Radix UI**: Unstyled, accessible component primitives\n- **Lucide React**: Consistent icon library with tree-shaking support\n- **Google Fonts**: Typography system with web font optimization\n\n### Development and Build Tools\n- **Replit Plugins**: Development environment integration for error handling and debugging\n- **PostCSS**: CSS processing pipeline with Tailwind and autoprefixer\n- **ESBuild**: Fast bundling for production server builds\n\n### State Management and Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation and schema definition","size_bytes":4220},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-subtle\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.8\",\n          },\n        },\n        \"bounce-subtle\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-2px)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-subtle\": \"pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce-subtle\": \"bounce-subtle 1s ease-in-out\",\n      },\n      boxShadow: {\n        \"2xs\": \"var(--shadow-2xs)\",\n        \"xs\": \"var(--shadow-xs)\",\n        \"sm\": \"var(--shadow-sm)\",\n        \"DEFAULT\": \"var(--shadow)\",\n        \"md\": \"var(--shadow-md)\",\n        \"lg\": \"var(--shadow-lg)\",\n        \"xl\": \"var(--shadow-xl)\",\n        \"2xl\": \"var(--shadow-2xl)\",\n      },\n      letterSpacing: {\n        normal: \"var(--tracking-normal)\",\n      },\n      spacing: {\n        \"custom\": \"var(--spacing)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3685},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      // Basic API logging without response body to avoid security issues\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      \n      // Only log response size in production, not full content\n      if (capturedJsonResponse && process.env.NODE_ENV === 'development') {\n        const responseStr = JSON.stringify(capturedJsonResponse);\n        logLine += ` :: ${responseStr.length > 100 ? responseStr.slice(0, 97) + \"...\" : responseStr}`;\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Enhanced error logging for production debugging\n    console.error(`Error ${status} on ${req.method} ${req.url}:`, {\n      message: err.message,\n      stack: err.stack,\n      timestamp: new Date().toISOString(),\n      userAgent: req.get('User-Agent'),\n    });\n\n    // Send user-friendly error response (hide stack traces in production)\n    res.status(status).json({ \n      message: status >= 500 ? \"Internal server error. Please try again.\" : message,\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n    });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2748},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { StockDataService } from \"./services/stockDataService\";\nimport { OpenAIStockService } from \"./services/openai\";\nimport { insertStockSchema, insertMarketIndexSchema, insertWatchlistSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const stockDataService = new StockDataService();\n  const openAIService = new OpenAIStockService();\n\n  // Initialize with some stock data\n  const initializeData = async () => {\n    try {\n      console.log('Initializing stock data...');\n      \n      // In production, log more details for debugging\n      if (process.env.NODE_ENV === 'production') {\n        console.log('Production mode: starting data initialization...');\n      }\n      \n      // Fetch market indices (fast operation)\n      const indices = await stockDataService.fetchMarketIndices();\n      for (const index of indices) {\n        await storage.createMarketIndex(index);\n      }\n\n      // Fetch all US stock data from Polygon API (slower operation)\n      const stocks = await stockDataService.fetchStockData(); // No symbols = fetch all\n      \n      // Batch insert stocks for better performance\n      const batchSize = 100;\n      for (let i = 0; i < stocks.length; i += batchSize) {\n        const batch = stocks.slice(i, i + batchSize);\n        await Promise.all(batch.map(stock => storage.createStock(stock)));\n        \n        // Small delay between batches to prevent overwhelming the system\n        if (i + batchSize < stocks.length) {\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n      }\n\n      console.log(`Initialized ${stocks.length} stocks and ${indices.length} market indices`);\n    } catch (error) {\n      console.error('Error initializing data:', error);\n      // Don't throw - let the server continue running\n    }\n  };\n\n  // Initialize data based on environment\n  if (process.env.NODE_ENV === 'production') {\n    // In production, delay initialization to allow server to start successfully first\n    setTimeout(() => {\n      initializeData().catch(error => {\n        console.error('Background data initialization failed:', error);\n      });\n    }, 5000); // 5 second delay\n  } else {\n    // In development, initialize immediately\n    initializeData().catch(error => {\n      console.error('Failed to initialize stock data:', error);\n    });\n  }\n\n  // Add fallback test data in case API initialization fails\n  setTimeout(async () => {\n    try {\n      const existingStocks = await storage.getStocks(1, 1);\n      if (existingStocks.stocks.length === 0) {\n        console.log('No stocks found, adding fallback test data...');\n        const testStocks = [\n          {\n            symbol: 'AAPL',\n            name: 'Apple Inc.',\n            sector: 'Technology',\n            currentPrice: 175.25,\n            previousClose: 170.10,\n            change: 5.15,\n            changePercent: 3.03,\n            volume: 52431100,\n            marketCap: 2780000000000,\n            isActive: true,\n          },\n          {\n            symbol: 'MSFT',\n            name: 'Microsoft Corporation',\n            sector: 'Technology',\n            currentPrice: 412.80,\n            previousClose: 408.15,\n            change: 4.65,\n            changePercent: 1.14,\n            volume: 18654200,\n            marketCap: 3080000000000,\n            isActive: true,\n          },\n          {\n            symbol: 'GOOGL',\n            name: 'Alphabet Inc. Class A',\n            sector: 'Technology',\n            currentPrice: 140.85,\n            previousClose: 138.40,\n            change: 2.45,\n            changePercent: 1.77,\n            volume: 23145600,\n            marketCap: 1780000000000,\n            isActive: true,\n          },\n          {\n            symbol: 'TSLA',\n            name: 'Tesla, Inc.',\n            sector: 'Consumer Cyclical',\n            currentPrice: 245.60,\n            previousClose: 240.15,\n            change: 5.45,\n            changePercent: 2.27,\n            volume: 45789300,\n            marketCap: 780000000000,\n            isActive: true,\n          },\n          {\n            symbol: 'NVDA',\n            name: 'NVIDIA Corporation',\n            sector: 'Technology',\n            currentPrice: 875.30,\n            previousClose: 862.15,\n            change: 13.15,\n            changePercent: 1.53,\n            volume: 31205400,\n            marketCap: 2150000000000,\n            isActive: true,\n          },\n        ];\n\n        for (const stock of testStocks) {\n          await storage.createStock(stock);\n        }\n        console.log(`Added ${testStocks.length} fallback test stocks`);\n      }\n    } catch (error) {\n      console.error('Error adding fallback test data:', error);\n    }\n  }, 3000);\n\n  // Get stocks with pagination\n  app.get(\"/api/stocks\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const sortBy = req.query.sortBy as string;\n      \n      const { stocks, total } = await storage.getStocks(page, limit, sortBy);\n      const hasMore = page * limit < total;\n\n      res.json({\n        stocks,\n        hasMore,\n        page,\n        total,\n      });\n    } catch (error) {\n      console.error('Error fetching stocks:', error);\n      res.status(500).json({ message: \"Failed to fetch stocks\" });\n    }\n  });\n\n  // Get single stock\n  app.get(\"/api/stocks/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const stock = await storage.getStock(symbol);\n      \n      if (!stock) {\n        return res.status(404).json({ message: \"Stock not found\" });\n      }\n\n      res.json(stock);\n    } catch (error) {\n      console.error('Error fetching stock:', error);\n      res.status(500).json({ message: \"Failed to fetch stock\" });\n    }\n  });\n\n  // Get detailed stock information with financial metrics from Yahoo Finance\n  app.get(\"/api/stocks/:symbol/details\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const upperSymbol = symbol.toUpperCase();\n      \n      // Get enhanced stock data from Yahoo Finance\n      const detailedData = await stockDataService.getDetailedStockData(upperSymbol);\n      \n      if (!detailedData) {\n        return res.status(404).json({ message: \"Stock details not found\" });\n      }\n      \n      res.json(detailedData);\n    } catch (error) {\n      console.error(`Error fetching detailed stock data for ${req.params.symbol}:`, error);\n      res.status(500).json({ message: \"Failed to fetch stock details\" });\n    }\n  });\n\n  // Analyze stock with AI\n  app.get(\"/api/stocks/:symbol/analysis\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const stock = await storage.getStock(symbol);\n      \n      if (!stock) {\n        return res.status(404).json({ message: \"Stock not found\" });\n      }\n\n      // Prepare stock data for analysis\n      const stockData = {\n        symbol: stock.symbol,\n        name: stock.name,\n        price: stock.currentPrice,\n        change: stock.change,\n        changePercent: stock.changePercent,\n        volume: stock.volume,\n        sector: stock.sector,\n      };\n\n      const analysis = await openAIService.analyzeStock(stockData);\n      res.json(analysis);\n    } catch (error) {\n      console.error('Error analyzing stock:', error);\n      res.status(500).json({ message: \"Failed to analyze stock\" });\n    }\n  });\n\n  // AI Expert Chat endpoint\n  app.post(\"/api/chat/expert\", async (req, res) => {\n    try {\n      const { messages, context } = req.body;\n\n      if (!messages || !Array.isArray(messages)) {\n        return res.status(400).json({ message: \"Messages array is required\" });\n      }\n\n      // Validate message format\n      for (const msg of messages) {\n        if (!msg.role || !msg.content || !['user', 'assistant'].includes(msg.role)) {\n          return res.status(400).json({ message: \"Invalid message format\" });\n        }\n      }\n\n      const response = await openAIService.chatWithExpert(messages, context);\n      res.json({ response });\n    } catch (error) {\n      console.error('Error in expert chat:', error);\n      res.status(500).json({ message: \"Failed to chat with expert\" });\n    }\n  });\n\n  // Get news for a stock\n  app.get(\"/api/stocks/:symbol/news\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const limit = parseInt(req.query.limit as string) || 10;\n      \n      const stock = await storage.getStock(symbol);\n      if (!stock) {\n        return res.status(404).json({ message: \"Stock not found\" });\n      }\n\n      const articles = await stockDataService.getNews(symbol, limit);\n      \n      res.json({\n        articles,\n        symbol,\n        total: articles.length,\n      });\n    } catch (error) {\n      console.error('Error fetching news:', error);\n      res.status(500).json({ message: \"Failed to fetch news\" });\n    }\n  });\n\n  // Search stocks (GET method for backward compatibility)\n  app.get(\"/api/stocks/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      if (!query || query.length < 1) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      // First search local storage\n      let stocks = await storage.searchStocks(query);\n      \n      // If no local results, search APIs\n      if (stocks.length === 0) {\n        const apiStocks = await stockDataService.searchStocks(query);\n        \n        // Store new stocks in local storage\n        for (const stock of apiStocks) {\n          const existing = await storage.getStock(stock.symbol);\n          if (!existing) {\n            await storage.createStock(stock);\n          }\n          const savedStock = await storage.getStock(stock.symbol);\n          if (savedStock) {\n            stocks.push(savedStock);\n          }\n        }\n      }\n\n      res.json({ stocks });\n    } catch (error) {\n      console.error('Error searching stocks:', error);\n      res.status(500).json({ message: \"Failed to search stocks\" });\n    }\n  });\n\n  // Search stocks (POST method - matches frontend expectation)\n  app.post(\"/api/stocks/search\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      \n      if (!query || query.length < 1) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      console.log(`Searching for stocks with query: \"${query}\"`);\n\n      // First search local storage\n      let stocks = await storage.searchStocks(query);\n      console.log(`Found ${stocks.length} stocks in local storage`);\n      \n      // If no local results, search APIs\n      if (stocks.length === 0) {\n        console.log('No local results, searching external APIs...');\n        const apiStocks = await stockDataService.searchStocks(query);\n        console.log(`Found ${apiStocks.length} stocks from external APIs`);\n        \n        // Store new stocks in local storage\n        for (const stock of apiStocks) {\n          const existing = await storage.getStock(stock.symbol);\n          if (!existing) {\n            await storage.createStock(stock);\n          }\n          const savedStock = await storage.getStock(stock.symbol);\n          if (savedStock) {\n            stocks.push(savedStock);\n          }\n        }\n      }\n\n      console.log(`Returning ${stocks.length} search results`);\n      res.json({ stocks });\n    } catch (error) {\n      console.error('Error searching stocks:', error);\n      res.status(500).json({ message: \"Failed to search stocks\" });\n    }\n  });\n\n  // Get market indices\n  app.get(\"/api/market/indices\", async (req, res) => {\n    try {\n      const indices = await storage.getMarketIndices();\n      res.json({\n        indices,\n        lastUpdated: new Date().toISOString(),\n      });\n    } catch (error) {\n      console.error('Error fetching market indices:', error);\n      res.status(500).json({ message: \"Failed to fetch market indices\" });\n    }\n  });\n\n  // Refresh stock data\n  app.post(\"/api/stocks/refresh\", async (req, res) => {\n    try {\n      const symbols = req.body.symbols as string[] || [];\n      const stocks = await stockDataService.fetchStockData(symbols);\n      \n      for (const stock of stocks) {\n        const existing = await storage.getStock(stock.symbol);\n        if (existing) {\n          await storage.updateStock(stock.symbol, stock);\n        } else {\n          await storage.createStock(stock);\n        }\n      }\n\n      res.json({ message: \"Stock data refreshed\", count: stocks.length });\n    } catch (error) {\n      console.error('Error refreshing stock data:', error);\n      res.status(500).json({ message: \"Failed to refresh stock data\" });\n    }\n  });\n\n  // Watchlist operations\n  app.get(\"/api/watchlist\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const watchlist = await storage.getWatchlist(userId);\n      res.json(watchlist);\n    } catch (error) {\n      console.error('Error fetching watchlist:', error);\n      res.status(500).json({ message: \"Failed to fetch watchlist\" });\n    }\n  });\n\n  app.post(\"/api/watchlist\", async (req, res) => {\n    try {\n      const validatedData = insertWatchlistSchema.parse(req.body);\n      const item = await storage.addToWatchlist(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid watchlist data\", errors: error.errors });\n      }\n      console.error('Error adding to watchlist:', error);\n      res.status(500).json({ message: \"Failed to add to watchlist\" });\n    }\n  });\n\n  app.delete(\"/api/watchlist/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const userId = req.query.userId as string;\n      \n      const removed = await storage.removeFromWatchlist(symbol, userId);\n      \n      if (!removed) {\n        return res.status(404).json({ message: \"Watchlist item not found\" });\n      }\n\n      res.json({ message: \"Removed from watchlist\" });\n    } catch (error) {\n      console.error('Error removing from watchlist:', error);\n      res.status(500).json({ message: \"Failed to remove from watchlist\" });\n    }\n  });\n\n  // Health check endpoint for deployment readiness\n  app.get(\"/health\", (req, res) => {\n    res.status(200).json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      environment: process.env.NODE_ENV || 'development'\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14576},"server/storage.ts":{"content":"import { type Stock, type InsertStock, type MarketIndex, type InsertMarketIndex, type Watchlist, type InsertWatchlist } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Stock operations\n  getStocks(page: number, limit: number, sortBy?: string): Promise<{ stocks: Stock[]; total: number }>;\n  getStock(symbol: string): Promise<Stock | undefined>;\n  createStock(stock: InsertStock): Promise<Stock>;\n  updateStock(symbol: string, updates: Partial<InsertStock>): Promise<Stock | undefined>;\n  searchStocks(query: string): Promise<Stock[]>;\n  \n  // Market index operations\n  getMarketIndices(): Promise<MarketIndex[]>;\n  createMarketIndex(index: InsertMarketIndex): Promise<MarketIndex>;\n  updateMarketIndex(symbol: string, updates: Partial<InsertMarketIndex>): Promise<MarketIndex | undefined>;\n  \n  // Watchlist operations\n  getWatchlist(userId?: string): Promise<Watchlist[]>;\n  addToWatchlist(item: InsertWatchlist): Promise<Watchlist>;\n  removeFromWatchlist(stockSymbol: string, userId?: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private stocks: Map<string, Stock>;\n  private marketIndices: Map<string, MarketIndex>;\n  private watchlist: Map<string, Watchlist>;\n\n  constructor() {\n    this.stocks = new Map();\n    this.marketIndices = new Map();\n    this.watchlist = new Map();\n  }\n\n  async getStocks(page: number = 1, limit: number = 10, sortBy: string = \"marketCap\"): Promise<{ stocks: Stock[]; total: number }> {\n    const allStocks = Array.from(this.stocks.values())\n      .filter(stock => stock.isActive)\n      .sort((a, b) => {\n        switch (sortBy) {\n          case \"price\":\n            return b.currentPrice - a.currentPrice;\n          case \"volume\":\n            return b.volume - a.volume;\n          case \"changePercent\":\n            return b.changePercent - a.changePercent;\n          case \"marketCap\":\n          default:\n            return (b.marketCap || 0) - (a.marketCap || 0);\n        }\n      });\n    \n    const total = allStocks.length;\n    const startIndex = (page - 1) * limit;\n    const stocks = allStocks.slice(startIndex, startIndex + limit);\n    \n    return { stocks, total };\n  }\n\n  async getStock(symbol: string): Promise<Stock | undefined> {\n    return this.stocks.get(symbol.toUpperCase());\n  }\n\n  async createStock(insertStock: InsertStock): Promise<Stock> {\n    const id = randomUUID();\n    const stock: Stock = {\n      ...insertStock,\n      id,\n      symbol: insertStock.symbol.toUpperCase(),\n      lastUpdated: new Date(),\n      isActive: true,\n      marketCap: insertStock.marketCap || null,\n      sector: insertStock.sector || null,\n    };\n    this.stocks.set(stock.symbol, stock);\n    return stock;\n  }\n\n  async updateStock(symbol: string, updates: Partial<InsertStock>): Promise<Stock | undefined> {\n    const existing = this.stocks.get(symbol.toUpperCase());\n    if (!existing) return undefined;\n\n    const updated: Stock = {\n      ...existing,\n      ...updates,\n      symbol: symbol.toUpperCase(),\n      lastUpdated: new Date(),\n    };\n    this.stocks.set(symbol.toUpperCase(), updated);\n    return updated;\n  }\n\n  async searchStocks(query: string): Promise<Stock[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.stocks.values()).filter(stock =>\n      stock.symbol.toLowerCase().includes(searchTerm) ||\n      stock.name.toLowerCase().includes(searchTerm) ||\n      (stock.sector && stock.sector.toLowerCase().includes(searchTerm))\n    );\n  }\n\n  async getMarketIndices(): Promise<MarketIndex[]> {\n    return Array.from(this.marketIndices.values());\n  }\n\n  async createMarketIndex(insertIndex: InsertMarketIndex): Promise<MarketIndex> {\n    const id = randomUUID();\n    const index: MarketIndex = {\n      ...insertIndex,\n      id,\n      symbol: insertIndex.symbol.toUpperCase(),\n      lastUpdated: new Date(),\n    };\n    this.marketIndices.set(index.symbol, index);\n    return index;\n  }\n\n  async updateMarketIndex(symbol: string, updates: Partial<InsertMarketIndex>): Promise<MarketIndex | undefined> {\n    const existing = this.marketIndices.get(symbol.toUpperCase());\n    if (!existing) return undefined;\n\n    const updated: MarketIndex = {\n      ...existing,\n      ...updates,\n      symbol: symbol.toUpperCase(),\n      lastUpdated: new Date(),\n    };\n    this.marketIndices.set(symbol.toUpperCase(), updated);\n    return updated;\n  }\n\n  async getWatchlist(userId?: string): Promise<Watchlist[]> {\n    return Array.from(this.watchlist.values()).filter(item =>\n      !userId || item.userId === userId\n    );\n  }\n\n  async addToWatchlist(insertItem: InsertWatchlist): Promise<Watchlist> {\n    const id = randomUUID();\n    const item: Watchlist = {\n      ...insertItem,\n      id,\n      stockSymbol: insertItem.stockSymbol.toUpperCase(),\n      addedAt: new Date(),\n      userId: insertItem.userId || null,\n    };\n    this.watchlist.set(id, item);\n    return item;\n  }\n\n  async removeFromWatchlist(stockSymbol: string, userId?: string): Promise<boolean> {\n    const items = Array.from(this.watchlist.entries()).filter(([_, item]) =>\n      item.stockSymbol.toUpperCase() === stockSymbol.toUpperCase() &&\n      (!userId || item.userId === userId)\n    );\n\n    if (items.length === 0) return false;\n\n    items.forEach(([id]) => this.watchlist.delete(id));\n    return true;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5357},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, bigint, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const stocks = pgTable(\"stocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  symbol: text(\"symbol\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  sector: text(\"sector\"),\n  currentPrice: real(\"current_price\").notNull(),\n  previousClose: real(\"previous_close\").notNull(),\n  change: real(\"change\").notNull(),\n  changePercent: real(\"change_percent\").notNull(),\n  volume: bigint(\"volume\", { mode: \"number\" }).notNull(),\n  marketCap: bigint(\"market_cap\", { mode: \"number\" }),\n  // Additional financial metrics\n  peRatio: real(\"pe_ratio\"),\n  fiftyTwoWeekHigh: real(\"fifty_two_week_high\"),\n  fiftyTwoWeekLow: real(\"fifty_two_week_low\"),\n  dayHigh: real(\"day_high\"),\n  dayLow: real(\"day_low\"),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const marketIndices = pgTable(\"market_indices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  symbol: text(\"symbol\").notNull().unique(),\n  value: real(\"value\").notNull(),\n  change: real(\"change\").notNull(),\n  changePercent: real(\"change_percent\").notNull(),\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\nexport const stockWatchlist = pgTable(\"stock_watchlist\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  stockSymbol: text(\"stock_symbol\").notNull(),\n  userId: text(\"user_id\"), // For future user system\n  addedAt: timestamp(\"added_at\").defaultNow(),\n});\n\nexport const insertStockSchema = createInsertSchema(stocks).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertMarketIndexSchema = createInsertSchema(marketIndices).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport const insertWatchlistSchema = createInsertSchema(stockWatchlist).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport type InsertStock = z.infer<typeof insertStockSchema>;\nexport type Stock = typeof stocks.$inferSelect;\nexport type InsertMarketIndex = z.infer<typeof insertMarketIndexSchema>;\nexport type MarketIndex = typeof marketIndices.$inferSelect;\nexport type InsertWatchlist = z.infer<typeof insertWatchlistSchema>;\nexport type Watchlist = typeof stockWatchlist.$inferSelect;\n\n// API Response types\nexport interface StockApiResponse {\n  stocks: Stock[];\n  hasMore: boolean;\n  page: number;\n  total: number;\n}\n\nexport interface MarketOverviewResponse {\n  indices: MarketIndex[];\n  lastUpdated: string;\n}\n","size_bytes":2634},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ErrorBoundary } from \"@/components/error-boundary\";\nimport StocksPage from \"@/pages/stocks\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={StocksPage} />\n      <Route path=\"/stocks\" component={StocksPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary onReset={() => window.location.reload()}>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":922},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 96%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 94%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(210, 40%, 94%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 94%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(210, 40%, 94%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 94%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 2px 4px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 4px 6px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 8px 10px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 92%, 76%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 76%, 78%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 4%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 92%, 76%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(224, 76%, 78%);\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00), 0px 1px 2px -1px hsl(217, 92%, 76% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00), 0px 1px 2px -1px hsl(217, 92%, 76% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00), 0px 2px 4px -1px hsl(217, 92%, 76% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00), 0px 4px 6px -1px hsl(217, 92%, 76% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00), 0px 8px 10px -1px hsl(217, 92%, 76% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217, 92%, 76% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom animations for stock data updates */\n@keyframes pulse-subtle {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.8;\n  }\n}\n\n.animate-pulse-subtle {\n  animation: pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes bounce-subtle {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-2px);\n  }\n}\n\n.animate-bounce-subtle {\n  animation: bounce-subtle 1s ease-in-out;\n}\n\n/* Stock price change indicators */\n.price-up {\n  @apply text-green-600 dark:text-green-400;\n}\n\n.price-down {\n  @apply text-red-600 dark:text-red-400;\n}\n\n.price-neutral {\n  @apply text-muted-foreground;\n}\n\n/* Loading states for stock cards */\n.loading-card {\n  @apply animate-pulse bg-muted opacity-20;\n}\n\n/* Chart placeholder styles */\n.chart-placeholder {\n  background: linear-gradient(135deg, \n    hsl(var(--card)) 0%, \n    hsl(var(--muted)) 100%);\n  border: 2px dashed hsl(var(--border));\n}\n\n/* Hover effects for interactive elements */\n.stock-card-hover {\n  @apply hover:shadow-md transition-all duration-200;\n}\n\n/* Status indicator styles */\n.status-live {\n  @apply bg-green-500 animate-pulse;\n}\n\n.status-delayed {\n  @apply bg-yellow-500;\n}\n\n.status-offline {\n  @apply bg-red-500;\n}\n","size_bytes":5858},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport { z } from \"zod\";\n\n// Proper Zod schema for StockAnalysis validation\nconst StockAnalysisSchema = z.object({\n  symbol: z.string().default(\"\"),\n  sentiment: z.enum(['bullish', 'bearish', 'neutral']).default('neutral'),\n  confidence: z.number().min(0).max(1).default(0.5),\n  keyPoints: z.array(z.string()).min(1).default([\"Analysis pending\"]),\n  riskLevel: z.enum(['low', 'medium', 'high']).default('medium'),\n  recommendation: z.enum(['buy', 'hold', 'sell']).default('hold'),\n  tradingStrategy: z.string().default(\"Strategy analysis pending\"),\n  entryPoints: z.object({\n    bullish: z.string().default(\"Bullish entry analysis pending\"),\n    bearish: z.string().default(\"Bearish entry analysis pending\")\n  }).default({}),\n  priceTargets: z.object({\n    conservative: z.number().default(0),\n    optimistic: z.number().default(0),\n    stopLoss: z.number().default(0)\n  }).default({}),\n  technicalAnalysis: z.object({\n    support: z.number().default(0),\n    resistance: z.number().default(0),\n    trend: z.enum(['uptrend', 'downtrend', 'sideways']).default('sideways'),\n    momentum: z.string().default(\"Momentum analysis pending\")\n  }).default({}),\n  fundamentalInsights: z.array(z.string()).min(1).default([\"Fundamental analysis pending\"]),\n  riskFactors: z.array(z.string()).min(1).default([\"Risk analysis pending\"]),\n  marketContext: z.string().default(\"Market context analysis pending\"),\n  timeHorizon: z.object({\n    shortTerm: z.string().default(\"Short-term analysis pending\"),\n    mediumTerm: z.string().default(\"Medium-term analysis pending\"),\n    longTerm: z.string().default(\"Long-term analysis pending\")\n  }).default({}),\n  competitorComparison: z.string().default(\"Competitor analysis pending\"),\n  newsImpact: z.string().default(\"News impact analysis pending\"),\n  volumeAnalysis: z.string().default(\"Volume analysis pending\"),\n  reasoning: z.string().default(\"Analysis reasoning pending\")\n});\n\n// Using gpt-4o-mini for reliable AI analysis\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY \n});\n\n// Helper function to safely convert to number\nconst toNumber = (value: any): number | undefined => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') {\n    const num = parseFloat(value);\n    return isNaN(num) ? undefined : num;\n  }\n  return undefined;\n};\n\n// Simplified validation function for OpenAI response\nconst validateAnalysisResponse = (rawResult: any) => {\n  const result = rawResult || {};\n  \n  return {\n    symbol: typeof result.symbol === 'string' ? result.symbol : undefined,\n    sentiment: ['bullish', 'bearish', 'neutral'].includes(result.sentiment) ? result.sentiment : 'neutral',\n    confidence: Math.min(1, Math.max(0, toNumber(result.confidence) || 0.5)),\n    keyPoints: Array.isArray(result.keyPoints) ? result.keyPoints.filter((p: any) => typeof p === 'string') : [],\n    riskLevel: ['low', 'medium', 'high'].includes(result.riskLevel) ? result.riskLevel : 'medium',\n    recommendation: ['buy', 'hold', 'sell'].includes(result.recommendation) ? result.recommendation : 'hold',\n    tradingStrategy: typeof result.tradingStrategy === 'string' ? result.tradingStrategy : '',\n    entryPoints: {\n      bullish: typeof result.entryPoints?.bullish === 'string' ? result.entryPoints.bullish : '',\n      bearish: typeof result.entryPoints?.bearish === 'string' ? result.entryPoints.bearish : ''\n    },\n    priceTargets: {\n      conservative: toNumber(result.priceTargets?.conservative) ?? 0,\n      optimistic: toNumber(result.priceTargets?.optimistic) ?? 0,\n      stopLoss: toNumber(result.priceTargets?.stopLoss) ?? 0\n    },\n    technicalAnalysis: {\n      support: toNumber(result.technicalAnalysis?.support) ?? 0,\n      resistance: toNumber(result.technicalAnalysis?.resistance) ?? 0,\n      trend: ['uptrend', 'downtrend', 'sideways'].includes(result.technicalAnalysis?.trend) ? result.technicalAnalysis.trend : 'sideways',\n      momentum: typeof result.technicalAnalysis?.momentum === 'string' ? result.technicalAnalysis.momentum : ''\n    },\n    fundamentalInsights: Array.isArray(result.fundamentalInsights) ? result.fundamentalInsights.filter((i: any) => typeof i === 'string') : [],\n    riskFactors: Array.isArray(result.riskFactors) ? result.riskFactors.filter((r: any) => typeof r === 'string') : [],\n    marketContext: typeof result.marketContext === 'string' ? result.marketContext : '',\n    timeHorizon: {\n      shortTerm: typeof result.timeHorizon?.shortTerm === 'string' ? result.timeHorizon.shortTerm : '',\n      mediumTerm: typeof result.timeHorizon?.mediumTerm === 'string' ? result.timeHorizon.mediumTerm : '',\n      longTerm: typeof result.timeHorizon?.longTerm === 'string' ? result.timeHorizon.longTerm : ''\n    },\n    competitorComparison: typeof result.competitorComparison === 'string' ? result.competitorComparison : '',\n    newsImpact: typeof result.newsImpact === 'string' ? result.newsImpact : '',\n    volumeAnalysis: typeof result.volumeAnalysis === 'string' ? result.volumeAnalysis : '',\n    reasoning: typeof result.reasoning === 'string' ? result.reasoning : ''\n  };\n};\n\nexport interface StockAnalysis {\n  symbol: string;\n  sentiment: 'bullish' | 'bearish' | 'neutral';\n  confidence: number;\n  keyPoints: string[];\n  riskLevel: 'low' | 'medium' | 'high';\n  recommendation: 'buy' | 'hold' | 'sell';\n  analysisTimestamp: string; // ISO timestamp when analysis was generated\n  // Enhanced trader-focused fields\n  tradingStrategy: string;\n  entryPoints: {\n    bullish: string;\n    bearish: string;\n  };\n  priceTargets: {\n    conservative: number;\n    optimistic: number;\n    stopLoss: number;\n  };\n  technicalAnalysis: {\n    support: number;\n    resistance: number;\n    trend: 'uptrend' | 'downtrend' | 'sideways';\n    momentum: string;\n  };\n  fundamentalInsights: string[];\n  riskFactors: string[];\n  marketContext: string;\n  timeHorizon: {\n    shortTerm: string; // 1-7 days\n    mediumTerm: string; // 1-3 months\n    longTerm: string; // 6+ months\n  };\n  competitorComparison: string;\n  newsImpact: string;\n  volumeAnalysis: string;\n  reasoning: string;\n}\n\nexport interface StockSearchResult {\n  symbol: string;\n  name: string;\n  relevanceScore: number;\n  matchReason: string;\n}\n\nexport class OpenAIStockService {\n  async analyzeStock(stockData: any): Promise<StockAnalysis> {\n    try {\n      // Calculate basic technical indicators\n      const currentPrice = stockData.price || stockData.currentPrice || 0;\n      const change = stockData.change || 0;\n      const changePercent = stockData.changePercent || 0;\n      const volume = stockData.volume || 0;\n      const marketCap = stockData.marketCap;\n      \n      // Calculate some basic technical levels\n      const dayHigh = stockData.dayHigh || currentPrice * 1.02;\n      const dayLow = stockData.dayLow || currentPrice * 0.98;\n      const fiftyTwoWeekHigh = stockData.fiftyTwoWeekHigh || currentPrice * 1.25;\n      const fiftyTwoWeekLow = stockData.fiftyTwoWeekLow || currentPrice * 0.75;\n      \n      // Enhanced technical analysis\n      const volatility = Math.abs(changePercent) > 3 ? 'High' : Math.abs(changePercent) > 1 ? 'Medium' : 'Low';\n      const volumeAnalysis = volume > 1000000 ? 'Above Average' : volume > 500000 ? 'Average' : 'Below Average';\n      const nearHighs = currentPrice > (fiftyTwoWeekHigh * 0.9) ? 'Near 52W highs' : 'Mid-range';\n      const nearLows = currentPrice < (fiftyTwoWeekLow * 1.1) ? 'Near 52W lows' : 'Above lows';\n      \n      // Current market context timestamp\n      const analysisDate = new Date().toISOString().split('T')[0];\n      const analysisTime = new Date().toLocaleTimeString();\n\n      const prompt = `\n        As an expert trader and financial analyst, provide comprehensive trading analysis for:\n        \n        ENHANCED STOCK DATA (Analysis Date: ${analysisDate} ${analysisTime}):\n        Symbol: ${stockData.symbol}\n        Company: ${stockData.name}\n        Current Price: $${currentPrice.toFixed(2)}\n        Daily Change: ${change >= 0 ? '+' : ''}$${change.toFixed(2)} (${changePercent >= 0 ? '+' : ''}${changePercent.toFixed(2)}%)\n        Volume: ${volume.toLocaleString()} (${volumeAnalysis})\n        Sector: ${stockData.sector || 'Unknown'}\n        Market Cap: ${marketCap ? '$' + (marketCap / 1e9).toFixed(1) + 'B' : 'N/A'}\n        \n        TECHNICAL DATA:\n        Day High: $${dayHigh.toFixed(2)}\n        Day Low: $${dayLow.toFixed(2)}\n        52-Week High: $${fiftyTwoWeekHigh.toFixed(2)} (${nearHighs})\n        52-Week Low: $${fiftyTwoWeekLow.toFixed(2)} (${nearLows})\n        Price Volatility: ${volatility}\n        Volume Analysis: ${volumeAnalysis}\n        \n        VALUATION CONTEXT:\n        P/E Ratio: ${stockData.peRatio ? stockData.peRatio.toFixed(2) : 'N/A'}\n        Employee Count: ${stockData.employees ? stockData.employees.toLocaleString() : 'N/A'}\n        Shares Outstanding: ${stockData.sharesOutstanding ? (stockData.sharesOutstanding / 1e9).toFixed(2) + 'B' : 'N/A'}\n        Exchange: ${stockData.exchange || 'N/A'}\n        \n        COMPANY PROFILE:\n        ${stockData.description ? stockData.description.substring(0, 300) + '...' : 'Company description not available'}\n        \n        Provide comprehensive trading analysis in JSON format with ALL fields filled with detailed, actionable content:\n        {\n          \"symbol\": \"${stockData.symbol}\",\n          \"sentiment\": \"bullish|bearish|neutral\",\n          \"confidence\": number (0-1),\n          \"keyPoints\": [\"5-7 specific, actionable trading insights with price levels and catalysts - be very detailed and specific\"],\n          \"riskLevel\": \"low|medium|high\",\n          \"recommendation\": \"buy|hold|sell\",\n          \"tradingStrategy\": \"Format as clear sections with bullet points:\\n\\n**CORE STRATEGY:**\\n• [Main approach and reasoning]\\n\\n**ENTRY TACTICS:**\\n• [Entry conditions and levels]\\n\\n**POSITION MANAGEMENT:**\\n• [Position sizing and risk management]\\n\\n**PROFIT TAKING:**\\n• [Exit strategies and targets]\\n\\n**KEY LEVELS:**\\n• [Important technical levels]\",\n          \"entryPoints\": {\n            \"bullish\": \"**BULLISH ENTRY:** Clear price level and specific conditions\\n• Entry price: [specific level]\\n• Conditions: [what needs to happen]\\n• Volume requirements: [if any]\",\n            \"bearish\": \"**BEARISH ENTRY:** Clear price level and specific conditions\\n• Short price: [specific level]\\n• Conditions: [what needs to happen]\\n• Stop loss: [specific level]\"\n          },\n          \"priceTargets\": {\n            \"conservative\": ${(currentPrice * 1.05).toFixed(2)}, \n            \"optimistic\": ${(currentPrice * 1.15).toFixed(2)},\n            \"stopLoss\": ${(currentPrice * 0.95).toFixed(2)}\n          },\n          \"technicalAnalysis\": {\n            \"support\": ${(currentPrice * 0.92).toFixed(2)},\n            \"resistance\": ${(currentPrice * 1.08).toFixed(2)},\n            \"trend\": \"uptrend|downtrend|sideways\",\n            \"momentum\": \"Technical momentum analysis\"\n          },\n          \"fundamentalInsights\": [\"5-8 detailed fundamental insights covering: earnings trends, revenue growth, competitive position, market share, financial health, cash flow, debt levels, and growth prospects - be specific with numbers and percentages\"],\n          \"riskFactors\": [\"5-7 specific risk scenarios with impact levels: regulatory risks, competition threats, market risks, operational risks, financial risks, and industry-specific risks - include probability assessments\"],\n          \"marketContext\": \"Detailed analysis of current market environment, sector performance, economic conditions, interest rate impact, institutional sentiment, and how these specifically affect this stock's outlook\",\n          \"timeHorizon\": {\n            \"shortTerm\": \"**SHORT-TERM (1-7 days):**\\n• Specific price targets and key levels to watch\\n• Immediate catalysts (earnings releases, product launches, economic data)\\n• Intraday trading ranges and volume patterns\\n• Technical indicator signals (RSI, MACD, moving averages)\\n• Options activity and institutional flows\\n• News events and sector rotation patterns\",\n            \"mediumTerm\": \"**MEDIUM-TERM (1-3 months):**\\n• Detailed swing trading setup with entry/exit points\\n• Earnings season expectations and historical patterns\\n• Quarterly guidance impact and revision cycles\\n• Technical pattern completion targets\\n• Seasonal trends and sector performance cycles\\n• Key business metrics and KPI expectations\\n• Competitive landscape changes and market share shifts\",\n            \"longTerm\": \"**LONG-TERM (6+ months):**\\n• Comprehensive investment thesis with multiple scenarios\\n• Fundamental valuation using DCF, P/E expansion, and sector multiples\\n• Industry disruption trends and technological shifts\\n• Regulatory environment changes and policy impacts\\n• Market expansion opportunities and geographic growth\\n• Management strategy execution and capital allocation\\n• ESG considerations and sustainability trends\"\n          },\n          \"competitorComparison\": \"Detailed comparison with 3-4 main competitors covering: market cap, revenue growth, profit margins, P/E ratios, market share, competitive advantages, and relative valuation metrics - include specific company names and percentages\",\n          \"newsImpact\": \"Comprehensive analysis of recent news impact including: earnings reports, analyst upgrades/downgrades, product announcements, regulatory changes, industry trends, and management guidance - assess both short and long-term price implications\",\n          \"volumeAnalysis\": \"In-depth volume analysis covering: current volume vs 30-day average, institutional vs retail activity, options flow analysis, after-hours trading patterns, and volume-price relationship signals - include specific volume numbers and percentages\",\n          \"reasoning\": \"**COMPREHENSIVE RECOMMENDATION RATIONALE:**\\n\\n• **Technical Analysis (40% weight):**\\n  - Price action patterns and trend analysis\\n  - Support/resistance levels with historical significance\\n  - Technical indicator convergence/divergence\\n  - Volume profile and institutional interest\\n  - Chart patterns and breakout potential\\n\\n• **Fundamental Analysis (35% weight):**\\n  - Earnings growth trajectory and quality\\n  - Revenue diversification and margin expansion\\n  - Balance sheet strength and cash generation\\n  - Competitive moat and market position\\n  - Management execution and capital allocation\\n\\n• **Risk Assessment (15% weight):**\\n  - Downside protection and stop-loss levels\\n  - Scenario analysis (bull/base/bear cases)\\n  - Correlation with market and sector risks\\n  - Liquidity and execution considerations\\n  - Black swan events and tail risks\\n\\n• **Market Environment (10% weight):**\\n  - Macro economic conditions and Fed policy\\n  - Sector rotation and style preferences\\n  - Sentiment indicators and positioning\\n  - Seasonal patterns and calendar effects\\n  - Geopolitical and regulatory considerations\\n\\n**CONVICTION LEVEL:** [High/Medium/Low] based on confluence of factors\\n**POSITION SIZING:** Recommended allocation as percentage of portfolio\\n**MONITORING TRIGGERS:** Key metrics and events that would change the thesis\"\n        }\n        \n        FORMATTING REQUIREMENTS:\n        - Use clear section headers with **bold text**\n        - Use bullet points (•) for lists\n        - Include specific price levels and percentages\n        - Make all text readable and well-structured\n        - No dense paragraphs - break up information clearly\n        \n        Think like a professional day trader and swing trader. Provide specific, actionable insights.\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // Switched to GPT-4o mini for better reliability\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an elite Wall Street trader and quantitative analyst with 20+ years experience at Goldman Sachs and Renaissance Technologies. You combine deep technical analysis, fundamental valuation, and market psychology. Always provide specific, actionable insights with precise price levels and risk management. Your analysis must be data-driven and include confidence calibration based on market conditions and data quality. Respond only with valid JSON containing ALL required fields.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        temperature: 0.3, // GPT-4o mini supports temperature for consistent analysis\n        top_p: 0.9, // GPT-4o mini supports top_p parameter\n        max_completion_tokens: parseInt(process.env.OPENAI_MAX_TOKENS || \"4500\"),\n\n      });\n\n      const content = response.choices[0].message.content || '{}';\n      let rawResult;\n      let result;\n      \n      try {\n        rawResult = JSON.parse(content);\n      } catch (parseError) {\n        console.error('Failed to parse OpenAI response as JSON:', parseError);\n        console.error('Response content:', content);\n        rawResult = {};\n      }\n\n      // Use Zod schema for proper validation with safe defaults\n      const zodResult = StockAnalysisSchema.safeParse(rawResult);\n      if (!zodResult.success) {\n        console.warn('OpenAI response validation failed, using fallback:', zodResult.error);\n        result = StockAnalysisSchema.parse({}); // Use all defaults\n      } else {\n        result = zodResult.data;\n      }\n\n      // Add analysis metadata\n      const analysisTimestamp = new Date().toISOString();\n      \n      return {\n        symbol: stockData.symbol,\n        analysisTimestamp,\n        sentiment: result.sentiment || 'neutral',\n        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n        keyPoints: Array.isArray(result.keyPoints) ? result.keyPoints : [],\n        riskLevel: result.riskLevel || 'medium',\n        recommendation: result.recommendation || 'hold',\n        // Enhanced trader-focused fields with fallbacks\n        tradingStrategy: result.tradingStrategy || 'Hold position and monitor price action for clear trend signals.',\n        entryPoints: {\n          bullish: result.entryPoints?.bullish || `Consider entry above $${(currentPrice * 1.02).toFixed(2)} with confirmation`,\n          bearish: result.entryPoints?.bearish || `Consider short entry below $${(currentPrice * 0.98).toFixed(2)} with confirmation`\n        },\n        priceTargets: {\n          conservative: result.priceTargets?.conservative || currentPrice * 1.05,\n          optimistic: result.priceTargets?.optimistic || currentPrice * 1.15,\n          stopLoss: result.priceTargets?.stopLoss || currentPrice * 0.95\n        },\n        technicalAnalysis: {\n          support: result.technicalAnalysis?.support || currentPrice * 0.92,\n          resistance: result.technicalAnalysis?.resistance || currentPrice * 1.08,\n          trend: result.technicalAnalysis?.trend || 'sideways',\n          momentum: result.technicalAnalysis?.momentum || 'Neutral momentum, awaiting catalyst'\n        },\n        fundamentalInsights: Array.isArray(result.fundamentalInsights) ? result.fundamentalInsights : ['Fundamental analysis pending additional data'],\n        riskFactors: Array.isArray(result.riskFactors) ? result.riskFactors : ['General market volatility risk'],\n        marketContext: result.marketContext || 'Current market conditions require careful position management',\n        timeHorizon: {\n          shortTerm: result.timeHorizon?.shortTerm || 'Monitor daily price action and volume patterns',\n          mediumTerm: result.timeHorizon?.mediumTerm || 'Watch for sector trends and earnings announcements',\n          longTerm: result.timeHorizon?.longTerm || 'Long-term outlook depends on fundamental developments'\n        },\n        competitorComparison: result.competitorComparison || 'Competitor analysis requires additional sector data',\n        newsImpact: result.newsImpact || 'No significant recent news affecting price action',\n        volumeAnalysis: result.volumeAnalysis || `Current volume of ${volume.toLocaleString()} indicates ${volumeAnalysis.toLowerCase()} trading activity`,\n        reasoning: result.reasoning || `Analysis based on current price action and technical indicators. Generated at ${analysisTimestamp}`\n      };\n    } catch (error) {\n      console.error('Error analyzing stock with OpenAI:', error);\n      throw new Error('Failed to analyze stock: ' + (error as Error).message);\n    }\n  }\n\n  async searchStocks(query: string, availableStocks: any[]): Promise<StockSearchResult[]> {\n    try {\n      const stockList = availableStocks.map(stock => \n        `${stock.symbol}: ${stock.name} (${stock.sector || 'Unknown sector'})`\n      ).join('\\n');\n\n      const prompt = `\n        Given this search query: \"${query}\"\n        \n        Find the most relevant stocks from this list:\n        ${stockList}\n        \n        Return up to 10 most relevant results in JSON format:\n        {\n          \"results\": [\n            {\n              \"symbol\": \"string\",\n              \"name\": \"string\", \n              \"relevanceScore\": number (0-1),\n              \"matchReason\": \"string explaining why this stock matches\"\n            }\n          ]\n        }\n        \n        Consider matches based on:\n        - Company name similarity\n        - Sector relevance\n        - Business description keywords\n        - Stock symbol similarity\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // Switched to GPT-4o mini for better reliability\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a stock search expert. Analyze the query and return the most relevant stock matches with clear reasoning.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_completion_tokens: parseInt(process.env.OPENAI_MAX_TOKENS || \"2000\"),\n\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"results\": []}');\n      return result.results || [];\n    } catch (error) {\n      console.error('Error searching stocks with OpenAI:', error);\n      throw new Error('Failed to search stocks: ' + (error as Error).message);\n    }\n  }\n\n  async chatWithExpert(messages: Array<{role: 'user' | 'assistant'; content: string}>, context?: {symbol?: string; marketData?: any}): Promise<string> {\n    try {\n      const systemPrompt = `You are TradeGPT, a friendly and enthusiastic AI trading companion with deep expertise in financial markets. You're like ChatGPT but specialized for trading and investing. \n\nYour personality:\n- Conversational, helpful, and encouraging like a knowledgeable friend\n- Use emojis occasionally to keep things friendly 😊📈\n- Adapt your communication style to match the user's level (beginner to expert)\n- Ask engaging follow-up questions to keep the conversation flowing\n- Give clear, actionable advice with real examples\n- Remember context from our conversation to build on previous topics\n\nYour expertise covers:\n- Day trading, swing trading, and long-term investing strategies\n- Technical analysis (RSI, MACD, support/resistance, chart patterns)\n- Fundamental analysis (P/E ratios, earnings, financial health)\n- Risk management and position sizing\n- Market psychology and sentiment analysis\n- Options, futures, and derivatives\n- Current market trends and news impact\n\n${context?.symbol ? `🎯 We're currently discussing ${context.symbol}. Keep this stock in focus and provide specific insights about it.` : ''}\n${context?.marketData ? `📊 Current market context: ${JSON.stringify(context.marketData)}` : ''}\n\nKeep responses conversational (2-4 paragraphs max), practical, and engaging. Think like you're chatting with a friend who trusts your financial expertise!`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // Using GPT-4o mini for faster, efficient responses\n        messages: [\n          {\n            role: \"system\",\n            content: systemPrompt\n          },\n          ...messages\n        ],\n        max_completion_tokens: parseInt(process.env.OPENAI_MAX_TOKENS || \"1200\"), // Reduced for faster responses\n        temperature: 0.8, // More conversational and friendly\n      });\n\n      return response.choices[0]?.message?.content || 'Hey! Something went wrong on my end 😅 Could you try asking that again? I\\'m here to help!';\n    } catch (error) {\n      console.error('Error in chat with TradeGPT:', error);\n      throw new Error('TradeGPT encountered an issue: ' + (error as Error).message);\n    }\n  }\n\n  async getMarketInsights(marketData: any[]): Promise<{ summary: string; trends: string[]; outlook: string }> {\n    try {\n      const marketSummary = marketData.map(index => \n        `${index.name}: ${index.value} (${index.changePercent > 0 ? '+' : ''}${index.changePercent}%)`\n      ).join('\\n');\n\n      const prompt = `\n        Analyze the current market conditions based on major indices:\n        ${marketSummary}\n        \n        Provide market insights in JSON format:\n        {\n          \"summary\": \"Brief 2-3 sentence market summary\",\n          \"trends\": [\"trend1\", \"trend2\", \"trend3\"],\n          \"outlook\": \"Short-term market outlook\"\n        }\n      `;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // Switched to GPT-4o mini for better reliability\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a market analyst providing concise, professional market insights based on index performance.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_completion_tokens: parseInt(process.env.OPENAI_MAX_TOKENS || \"2000\"),\n\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      return {\n        summary: result.summary || 'Market analysis unavailable',\n        trends: Array.isArray(result.trends) ? result.trends : [],\n        outlook: result.outlook || 'Outlook unavailable'\n      };\n    } catch (error) {\n      console.error('Error getting market insights with OpenAI:', error);\n      throw new Error('Failed to get market insights: ' + (error as Error).message);\n    }\n  }\n}\n\nexport const openAIStockService = new OpenAIStockService();\n","size_bytes":26406},"server/services/polygonApi.ts":{"content":"interface PolygonTickerResponse {\n  results?: Array<{\n    ticker: string;\n    name: string;\n    market: string;\n    locale: string;\n    primary_exchange: string;\n    type: string;\n    active: boolean;\n    currency_name: string;\n    cik?: string;\n    composite_figi?: string;\n    share_class_figi?: string;\n    last_updated_utc: string;\n  }>;\n  status: string;\n  count: number;\n  next_url?: string;\n}\n\ninterface PolygonTickerDetailsResponse {\n  results?: {\n    ticker: string;\n    name: string;\n    market: string;\n    locale: string;\n    primary_exchange: string;\n    type: string;\n    active: boolean;\n    currency_name: string;\n    cik?: string;\n    composite_figi?: string;\n    share_class_figi?: string;\n    last_updated_utc: string;\n    // Additional details that might include industry/sector info\n    description?: string;\n    homepage_url?: string;\n    total_employees?: number;\n    list_date?: string;\n    branding?: {\n      logo_url?: string;\n      icon_url?: string;\n    };\n    share_class_shares_outstanding?: number;\n    weighted_shares_outstanding?: number;\n    market_cap?: number;\n    phone_number?: string;\n    address?: {\n      address1?: string;\n      city?: string;\n      state?: string;\n      postal_code?: string;\n    };\n    sic_code?: string;\n    sic_description?: string;\n  };\n  status: string;\n}\n\ninterface PolygonQuoteResponse {\n  results?: {\n    c: number; // close\n    h: number; // high\n    l: number; // low\n    o: number; // open\n    v: number; // volume\n    vw: number; // volume weighted average price\n    t: number; // timestamp\n  };\n  status: string;\n  ticker: string;\n}\n\ninterface PolygonGroupedDailyResponse {\n  results?: Array<{\n    T: string; // ticker\n    c: number; // close\n    h: number; // high\n    l: number; // low\n    o: number; // open\n    v: number; // volume\n    vw: number; // volume weighted average price\n    t: number; // timestamp\n  }>;\n  status: string;\n  resultsCount: number;\n}\n\nexport class PolygonApiService {\n  private apiKey: string;\n  private baseUrl = 'https://api.polygon.io';\n  private lastRequestTime = 0;\n  private readonly MIN_REQUEST_INTERVAL = 50; // Minimal delay for paid plan (unlimited requests)\n\n  constructor() {\n    this.apiKey = process.env.POLYGON_API_KEY || process.env.NEXT_PUBLIC_POLYGON_API_KEY || '';\n    if (!this.apiKey) {\n      throw new Error('Polygon API key is required');\n    }\n  }\n\n  private async makeRequest<T>(endpoint: string, retryCount = 0): Promise<T> {\n    // Rate limiting: ensure minimum time between requests\n    const now = Date.now();\n    const timeSinceLastRequest = now - this.lastRequestTime;\n    if (timeSinceLastRequest < this.MIN_REQUEST_INTERVAL) {\n      await new Promise(resolve => setTimeout(resolve, this.MIN_REQUEST_INTERVAL - timeSinceLastRequest));\n    }\n    this.lastRequestTime = Date.now();\n\n    const url = `${this.baseUrl}${endpoint}`;\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      // Handle rate limiting (should not happen on paid plan, but handle gracefully)\n      if (response.status === 429 && retryCount < 1) { \n        console.warn(`Unexpected rate limit on paid plan - checking after 1 second`);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return this.makeRequest<T>(endpoint, retryCount + 1);\n      }\n      \n      throw new Error(`Polygon API error: ${response.status} ${response.statusText}`);\n    }\n    \n    return response.json();\n  }\n\n  async getStockTickers(limit: number = 100, cursor?: string): Promise<PolygonTickerResponse> {\n    let endpoint = `/v3/reference/tickers?market=stocks&active=true&limit=${limit}&apikey=${this.apiKey}`;\n    if (cursor) {\n      endpoint += `&cursor=${cursor}`;\n    }\n    return this.makeRequest<PolygonTickerResponse>(endpoint);\n  }\n\n  async getStockQuote(symbol: string): Promise<PolygonQuoteResponse> {\n    const endpoint = `/v2/aggs/ticker/${symbol}/prev?adjusted=true&apikey=${this.apiKey}`;\n    return this.makeRequest<PolygonQuoteResponse>(endpoint);\n  }\n\n  async getGroupedDaily(date?: string): Promise<PolygonGroupedDailyResponse> {\n    const targetDate = date || this.getPreviousBusinessDay();\n    const endpoint = `/v2/aggs/grouped/locale/us/market/stocks/${targetDate}?adjusted=true&apikey=${this.apiKey}`;\n    return this.makeRequest<PolygonGroupedDailyResponse>(endpoint);\n  }\n\n  async getMarketStatus(): Promise<any> {\n    const endpoint = `/v1/marketstatus/now?apikey=${this.apiKey}`;\n    return this.makeRequest(endpoint);\n  }\n\n  private getPreviousBusinessDay(): string {\n    const date = new Date();\n    date.setDate(date.getDate() - 1);\n    \n    // If it's weekend, go to Friday\n    while (date.getDay() === 0 || date.getDay() === 6) {\n      date.setDate(date.getDate() - 1);\n    }\n    \n    return date.toISOString().split('T')[0];\n  }\n\n  async searchTickers(search: string): Promise<PolygonTickerResponse> {\n    const endpoint = `/v3/reference/tickers?search=${encodeURIComponent(search)}&market=stocks&active=true&limit=50&apikey=${this.apiKey}`;\n    return this.makeRequest<PolygonTickerResponse>(endpoint);\n  }\n\n  async getTickerDetails(symbol: string): Promise<PolygonTickerDetailsResponse> {\n    const endpoint = `/v3/reference/tickers/${symbol}?apikey=${this.apiKey}`;\n    return this.makeRequest<PolygonTickerDetailsResponse>(endpoint);\n  }\n}\n","size_bytes":5299},"server/services/stockDataService.ts":{"content":"import { PolygonApiService } from './polygonApi';\nimport { YahooFinanceService } from './yahooFinanceApi';\nimport { type InsertStock, type InsertMarketIndex } from '@shared/schema';\n\nexport class StockDataService {\n  private polygonApi: PolygonApiService;\n  private yahooApi: YahooFinanceService;\n  private sectorCache = new Map<string, { sector: string; timestamp: number }>();\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\n  constructor() {\n    this.polygonApi = new PolygonApiService();\n    this.yahooApi = new YahooFinanceService();\n  }\n\n  // Reliable sector mapping for major stocks (free alternative to unreliable APIs)\n  private getMajorStockSectors(): Map<string, string> {\n    const sectors = new Map([\n      // Technology\n      ['AAPL', 'Technology'], ['MSFT', 'Technology'], ['GOOGL', 'Technology'], \n      ['META', 'Technology'], ['NVDA', 'Technology'], ['NFLX', 'Technology'],\n      ['AMD', 'Technology'], ['INTC', 'Technology'], ['CRM', 'Technology'],\n      ['ORCL', 'Technology'], ['ADBE', 'Technology'], ['CSCO', 'Technology'],\n      ['IBM', 'Technology'], ['QCOM', 'Technology'], ['TXN', 'Technology'],\n      ['AVGO', 'Technology'], ['NOW', 'Technology'], ['INTU', 'Technology'],\n      \n      // E-commerce & Consumer\n      ['AMZN', 'Consumer Discretionary'], ['TSLA', 'Automotive'], \n      ['SHOP', 'Technology'], ['PYPL', 'Financial Services'],\n      \n      // Financial Services\n      ['JPM', 'Financial Services'], ['BAC', 'Financial Services'],\n      ['WFC', 'Financial Services'], ['GS', 'Financial Services'],\n      ['MS', 'Financial Services'], ['C', 'Financial Services'],\n      ['V', 'Financial Services'], ['MA', 'Financial Services'],\n      ['AXP', 'Financial Services'], ['BLK', 'Financial Services'],\n      \n      // Healthcare\n      ['JNJ', 'Healthcare'], ['PFE', 'Healthcare'], ['UNH', 'Healthcare'],\n      ['ABT', 'Healthcare'], ['TMO', 'Healthcare'], ['DHR', 'Healthcare'],\n      ['CVS', 'Healthcare'], ['MRK', 'Healthcare'], ['LLY', 'Healthcare'],\n      ['ABBV', 'Healthcare'], ['BMY', 'Healthcare'], ['AMGN', 'Healthcare'],\n      \n      // Consumer Goods\n      ['KO', 'Consumer Staples'], ['PEP', 'Consumer Staples'],\n      ['WMT', 'Consumer Staples'], ['PG', 'Consumer Staples'],\n      ['COST', 'Consumer Staples'], ['MCD', 'Consumer Discretionary'],\n      ['SBUX', 'Consumer Discretionary'], ['NKE', 'Consumer Discretionary'],\n      ['DIS', 'Entertainment'], ['HD', 'Consumer Discretionary'],\n      \n      // Energy\n      ['XOM', 'Energy'], ['CVX', 'Energy'], ['COP', 'Energy'],\n      ['SLB', 'Energy'], ['EOG', 'Energy'], ['PXD', 'Energy'],\n      \n      // Industrials\n      ['BA', 'Industrials'], ['CAT', 'Industrials'], ['GE', 'Industrials'],\n      ['MMM', 'Industrials'], ['HON', 'Industrials'], ['UPS', 'Industrials'],\n      ['RTX', 'Industrials'], ['LMT', 'Industrials'], ['DE', 'Industrials'],\n      \n      // Utilities\n      ['NEE', 'Utilities'], ['DUK', 'Utilities'], ['SO', 'Utilities'],\n      ['D', 'Utilities'], ['AEP', 'Utilities'], ['EXC', 'Utilities'],\n      \n      // Real Estate\n      ['AMT', 'Real Estate'], ['PLD', 'Real Estate'], ['CCI', 'Real Estate'],\n      ['EQIX', 'Real Estate'], ['SPG', 'Real Estate'], ['O', 'Real Estate'],\n      \n      // Materials\n      ['LIN', 'Materials'], ['APD', 'Materials'], ['ECL', 'Materials'],\n      ['SHW', 'Materials'], ['FCX', 'Materials'], ['NEM', 'Materials'],\n      \n      // Communication Services\n      ['T', 'Communication Services'], ['VZ', 'Communication Services'],\n      ['CMCSA', 'Communication Services'], ['TMUS', 'Communication Services'],\n      \n      // ETFs (Funds)\n      ['SPY', 'Fund'], ['QQQ', 'Fund'], ['IWM', 'Fund'],\n      ['VTI', 'Fund'], ['VOO', 'Fund'], ['IVV', 'Fund'],\n      ['VEA', 'Fund'], ['IEFA', 'Fund'], ['VWO', 'Fund'],\n      ['TLT', 'Fund'], ['GLD', 'Fund'], ['SLV', 'Fund'],\n    ]);\n    \n    return sectors;\n  }\n\n  // Calculate approximate market cap based on price and volume\n  private calculateMarketCap(price: number, volume: number): number | null {\n    if (!price || !volume) return null;\n    \n    // This is a very rough approximation - real market cap needs shares outstanding\n    // For now, we'll use a volume-based estimate for display purposes\n    const approximateShares = volume * 100; // Very rough estimate\n    const marketCap = price * approximateShares;\n    \n    // Return in millions for readability\n    return Math.round(marketCap / 1000000);\n  }\n\n  async fetchStockData(symbols: string[] = []): Promise<InsertStock[]> {\n    const stocks: InsertStock[] = [];\n\n    // Try Polygon.io first\n    try {\n      // Get explicit dates for current and previous trading days\n      const currentDate = this.getLastTradingDay();\n      const previousDate = this.getLastTradingDay(2);\n      \n      const currentData = await this.polygonApi.getGroupedDaily(currentDate);\n      const previousData = await this.polygonApi.getGroupedDaily(previousDate);\n      \n      if (currentData.results) {\n        console.log(`Found ${currentData.results.length} stocks from Polygon API`);\n        \n        // Create map of previous day's closing prices\n        const previousCloseMap = new Map<string, number>();\n        if (previousData.results) {\n          previousData.results.forEach(result => {\n            if (result.c && result.c > 0) {\n              previousCloseMap.set(result.T, result.c);\n            }\n          });\n          console.log(`Loaded previous close data for ${previousCloseMap.size} stocks`);\n        }\n        \n        // Get all tickers with company names and sectors (batch fetch for efficiency)\n        const tickerMap = new Map<string, { name: string; type?: string }>();\n        \n        try {\n          // Fetch ticker mappings in batches\n          let cursor = '';\n          let fetchMore = true;\n          let tickerCount = 0;\n          \n          while (fetchMore && tickerCount < 5000) { // Limit to prevent excessive API calls\n            const tickerResponse = await this.polygonApi.getStockTickers(1000, cursor || undefined);\n            \n            if (tickerResponse.results) {\n              tickerResponse.results.forEach(ticker => {\n                tickerMap.set(ticker.ticker, {\n                  name: ticker.name,\n                  type: ticker.type\n                });\n              });\n              tickerCount += tickerResponse.results.length;\n            }\n            \n            cursor = tickerResponse.next_url ? tickerResponse.next_url.split('cursor=')[1]?.split('&')[0] || '' : '';\n            fetchMore = !!tickerResponse.next_url && !!cursor;\n            \n            // Small delay to avoid rate limiting\n            await new Promise(resolve => setTimeout(resolve, 100));\n          }\n          \n          console.log(`Loaded ${tickerMap.size} ticker mappings`);\n        } catch (error) {\n          console.error('Error fetching ticker mappings:', error);\n        }\n\n        // Prepare valid symbols for bulk processing\n        const validResults = [];\n        for (const result of currentData.results) {\n          const symbol = result.T;\n          \n          // If specific symbols are requested, filter to only those\n          if (symbols.length > 0 && !symbols.includes(symbol)) {\n            continue;\n          }\n          \n          // Skip if essential data is missing or invalid\n          if (!result.c || result.c <= 0) {\n            continue;\n          }\n          \n          const previousClose = previousCloseMap.get(symbol);\n          \n          // Skip stocks without valid previous close data to avoid incorrect calculations\n          if (!previousClose || previousClose <= 0) {\n            continue;\n          }\n          \n          const change = result.c - previousClose;\n          const changePercent = (change / previousClose) * 100;\n          \n          // Validate no NaN values before adding to results\n          if (isNaN(change) || isNaN(changePercent)) {\n            console.warn(`Skipping ${symbol}: invalid change calculation`);\n            continue;\n          }\n\n          validResults.push({ result, change, changePercent });\n        }\n\n        // Sort by volume and take top symbols to reduce Yahoo API load\n        const topSymbols = validResults\n          .sort((a, b) => (b.result.v || 0) - (a.result.v || 0))\n          .slice(0, 200) // Limit to top 200 by volume\n          .map(item => item.result.T);\n\n        // Use a simple free sector mapping for major stocks instead of relying on unreliable APIs\n        const sectorMap = this.getMajorStockSectors();\n        console.log(`Using pre-defined sector data for ${sectorMap.size} major stocks`);\n\n        // Process all valid results with enhanced sector logic\n        for (const { result, change, changePercent } of validResults) {\n          const symbol = result.T;\n          const tickerInfo = tickerMap.get(symbol);\n          \n          // Get sector using pre-defined mapping first, then fallback logic\n          const predefinedSector = sectorMap.get(symbol);\n          const sector = await this.getSectorForStock(symbol, predefinedSector, tickerInfo?.type, true);\n\n          stocks.push({\n            symbol,\n            name: tickerInfo?.name ? this.cleanCompanyName(tickerInfo.name) : this.getReadableSymbolName(symbol),\n            sector,\n            currentPrice: result.c,\n            previousClose: previousCloseMap.get(symbol)!,\n            change,\n            changePercent,\n            volume: result.v || 0,\n            marketCap: null, // Will be populated with real data from detailed endpoint\n            isActive: true,\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Polygon API error, falling back to Yahoo Finance:', error);\n      \n      // Fallback to Yahoo Finance\n      const targetSymbols = symbols.length > 0 ? symbols : [\n        'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX', 'AMD', 'CRM'\n      ];\n\n      const yahooData = await this.yahooApi.getMultipleQuotes(targetSymbols);\n      \n      for (const quote of yahooData) {\n        if (quote.regularMarketPrice && quote.regularMarketPreviousClose) {\n          // Use enhanced sector logic for Yahoo fallback (skip Polygon during bulk init)\n          const sector = await this.getSectorForStock(quote.symbol, quote.sector, undefined, true);\n\n          stocks.push({\n            symbol: quote.symbol,\n            name: this.cleanCompanyName(quote.longName || quote.shortName || quote.symbol),\n            sector,\n            currentPrice: quote.regularMarketPrice,\n            previousClose: quote.regularMarketPreviousClose,\n            change: quote.regularMarketChange || 0,\n            changePercent: quote.regularMarketChangePercent || 0,\n            volume: quote.regularMarketVolume || 0,\n            marketCap: quote.marketCap || null,\n            isActive: true,\n          });\n        }\n      }\n    }\n\n    return stocks;\n  }\n\n  async fetchMarketIndices(): Promise<InsertMarketIndex[]> {\n    const indices: InsertMarketIndex[] = [];\n    const indexSymbols = [\n      { symbol: 'SPY', name: 'S&P 500' },\n      { symbol: 'QQQ', name: 'NASDAQ' },\n      { symbol: 'DIA', name: 'Dow Jones' }\n    ];\n\n    try {\n      // Try Yahoo Finance for indices\n      for (const index of indexSymbols) {\n        const quote = await this.yahooApi.getQuote(index.symbol);\n        if (quote && quote.regularMarketPrice && quote.regularMarketPreviousClose) {\n          indices.push({\n            name: index.name,\n            symbol: index.symbol,\n            value: quote.regularMarketPrice,\n            change: quote.regularMarketChange || 0,\n            changePercent: quote.regularMarketChangePercent || 0,\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching market indices:', error);\n    }\n\n    return indices;\n  }\n\n  async searchStocks(query: string): Promise<InsertStock[]> {\n    const stocks: InsertStock[] = [];\n\n    try {\n      // Try Polygon search first, but use Yahoo Finance for accurate price data\n      const polygonResults = await this.polygonApi.searchTickers(query);\n      \n      if (polygonResults.results) {\n        // Get symbols and fetch accurate quotes from Yahoo Finance\n        const symbols = polygonResults.results.slice(0, 10).map(t => t.ticker);\n        const yahooQuotes = await this.yahooApi.getMultipleQuotes(symbols);\n        \n        for (const quote of yahooQuotes) {\n          if (quote.regularMarketPrice && quote.regularMarketPreviousClose) {\n            const tickerInfo = polygonResults.results.find(t => t.ticker === quote.symbol);\n            // Use enhanced sector logic for search results (allow Polygon for individual searches)\n            const sector = await this.getSectorForStock(quote.symbol, quote.sector, tickerInfo?.type);\n\n            stocks.push({\n              symbol: quote.symbol,\n              name: this.cleanCompanyName(quote.longName || quote.shortName || tickerInfo?.name || quote.symbol),\n              sector,\n              currentPrice: quote.regularMarketPrice,\n              previousClose: quote.regularMarketPreviousClose,\n              change: quote.regularMarketChange || 0,\n              changePercent: quote.regularMarketChangePercent || 0,\n              volume: quote.regularMarketVolume || 0,\n              marketCap: quote.marketCap || null,\n              isActive: tickerInfo?.active ?? true,\n            });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Polygon search error, falling back to Yahoo Finance:', error);\n      \n      // Fallback to Yahoo Finance search\n      const yahooResults = await this.yahooApi.searchSymbols(query);\n      for (const quote of yahooResults) {\n        if (quote.regularMarketPrice && quote.regularMarketPreviousClose) {\n          // Use enhanced sector logic for Yahoo fallback (allow Polygon for individual searches)\n          const sector = await this.getSectorForStock(quote.symbol, quote.sector);\n\n          stocks.push({\n            symbol: quote.symbol,\n            name: this.cleanCompanyName(quote.longName || quote.shortName || quote.symbol),\n            sector,\n            currentPrice: quote.regularMarketPrice,\n            previousClose: quote.regularMarketPreviousClose,\n            change: quote.regularMarketChange || 0,\n            changePercent: quote.regularMarketChangePercent || 0,\n            volume: quote.regularMarketVolume || 0,\n            marketCap: quote.marketCap || null,\n            isActive: true,\n          });\n        }\n      }\n    }\n\n    return stocks;\n  }\n\n  private getSectorFromSIC(sicCode?: string): string {\n    if (!sicCode) return 'Unknown';\n    \n    const sic = parseInt(sicCode);\n    \n    // SIC code to sector mapping based on major divisions\n    if (sic >= 100 && sic <= 999) return 'Agriculture';\n    if (sic >= 1000 && sic <= 1499) return 'Mining';\n    if (sic >= 1500 && sic <= 1799) return 'Construction';\n    if (sic >= 2000 && sic <= 2099) return 'Food Products';\n    if (sic >= 2100 && sic <= 2199) return 'Tobacco Products';\n    if (sic >= 2200 && sic <= 2299) return 'Textiles';\n    if (sic >= 2300 && sic <= 2399) return 'Apparel';\n    if (sic >= 2400 && sic <= 2499) return 'Wood Products';\n    if (sic >= 2500 && sic <= 2599) return 'Furniture';\n    if (sic >= 2600 && sic <= 2699) return 'Paper Products';\n    if (sic >= 2700 && sic <= 2799) return 'Publishing';\n    if (sic >= 2800 && sic <= 2899) return 'Chemicals';\n    if (sic >= 2900 && sic <= 2999) return 'Petroleum';\n    if (sic >= 3000 && sic <= 3099) return 'Rubber';\n    if (sic >= 3100 && sic <= 3199) return 'Leather Products';\n    if (sic >= 3200 && sic <= 3299) return 'Stone & Glass';\n    if (sic >= 3300 && sic <= 3399) return 'Metals';\n    if (sic >= 3400 && sic <= 3499) return 'Machinery';\n    if (sic >= 3500 && sic <= 3599) return 'Industrial Equipment';\n    if (sic >= 3600 && sic <= 3699) return 'Electronics';\n    if (sic >= 3700 && sic <= 3799) return 'Transportation Equipment';\n    if (sic >= 3800 && sic <= 3899) return 'Instruments';\n    if (sic >= 3900 && sic <= 3999) return 'Manufacturing';\n    if (sic >= 4000 && sic <= 4099) return 'Railroad Transportation';\n    if (sic >= 4100 && sic <= 4199) return 'Transportation';\n    if (sic >= 4200 && sic <= 4299) return 'Trucking';\n    if (sic >= 4400 && sic <= 4499) return 'Water Transportation';\n    if (sic >= 4500 && sic <= 4599) return 'Air Transportation';\n    if (sic >= 4600 && sic <= 4699) return 'Transportation Services';\n    if (sic >= 4700 && sic <= 4799) return 'Transportation Services';\n    if (sic >= 4800 && sic <= 4899) return 'Communications';\n    if (sic >= 4900 && sic <= 4999) return 'Utilities';\n    if (sic >= 5000 && sic <= 5199) return 'Wholesale Trade';\n    if (sic >= 5200 && sic <= 5999) return 'Retail Trade';\n    if (sic >= 6000 && sic <= 6099) return 'Banking';\n    if (sic >= 6100 && sic <= 6199) return 'Credit Agencies';\n    if (sic >= 6200 && sic <= 6299) return 'Securities';\n    if (sic >= 6300 && sic <= 6399) return 'Insurance';\n    if (sic >= 6400 && sic <= 6499) return 'Insurance Agents';\n    if (sic >= 6500 && sic <= 6599) return 'Real Estate';\n    if (sic >= 6700 && sic <= 6799) return 'Investment Services';\n    if (sic >= 7000 && sic <= 7099) return 'Hotels';\n    if (sic >= 7200 && sic <= 7299) return 'Personal Services';\n    if (sic >= 7300 && sic <= 7399) return 'Business Services';\n    if (sic >= 7500 && sic <= 7599) return 'Automotive Services';\n    if (sic >= 7600 && sic <= 7699) return 'Miscellaneous Repair';\n    if (sic >= 7800 && sic <= 7899) return 'Entertainment';\n    if (sic >= 7900 && sic <= 7999) return 'Recreation Services';\n    if (sic >= 8000 && sic <= 8099) return 'Healthcare';\n    if (sic >= 8100 && sic <= 8199) return 'Legal Services';\n    if (sic >= 8200 && sic <= 8299) return 'Education';\n    if (sic >= 8300 && sic <= 8399) return 'Social Services';\n    if (sic >= 8400 && sic <= 8499) return 'Museums';\n    if (sic >= 8600 && sic <= 8699) return 'Professional Services';\n    if (sic >= 8700 && sic <= 8799) return 'Engineering Services';\n    if (sic >= 8800 && sic <= 8899) return 'Private Households';\n    if (sic >= 9100 && sic <= 9199) return 'Government';\n    if (sic >= 9200 && sic <= 9299) return 'Justice & Safety';\n    if (sic >= 9300 && sic <= 9399) return 'Public Finance';\n    if (sic >= 9400 && sic <= 9499) return 'Administration';\n    if (sic >= 9500 && sic <= 9699) return 'Government';\n    if (sic >= 9700 && sic <= 9999) return 'Non-Classifiable';\n    \n    return 'Unknown';\n  }\n\n  private getSecurityTypeCategory(type?: string): string {\n    if (!type) return 'Unknown';\n    \n    // Only use security type for actual security categories, not business sectors\n    const typeMap: Record<string, string> = {\n      'ETF': 'Fund',\n      'FUND': 'Fund',\n      'INDEX': 'Index',\n      'WARRANT': 'Warrant',\n      'RIGHT': 'Rights',\n      'BOND': 'Bond',\n      'NOTE': 'Bond',\n      'UNIT': 'Unit',\n    };\n\n    return typeMap[type] || 'Stock';\n  }\n\n  // Enhanced sector identification with proper prioritization and caching\n  private async getSectorForStock(symbol: string, yahooSector?: string, tickerType?: string, skipPolygonDetails = false): Promise<string> {\n    // Check cache first\n    const cached = this.sectorCache.get(symbol);\n    if (cached && (Date.now() - cached.timestamp) < this.CACHE_DURATION) {\n      return cached.sector;\n    }\n\n    let sector = 'Unknown';\n\n    // Priority 1: Yahoo Finance sector data (most reliable for business sectors)\n    if (yahooSector && yahooSector !== 'Unknown') {\n      sector = yahooSector;\n    } else if (!skipPolygonDetails) {\n      // Priority 2: Try to get detailed Polygon data with SIC code (only if not rate limited)\n      try {\n        const details = await this.polygonApi.getTickerDetails(symbol);\n        if (details.results?.sic_code) {\n          const sicSector = this.getSectorFromSIC(details.results.sic_code);\n          if (sicSector !== 'Unknown') {\n            sector = sicSector;\n          }\n        }\n      } catch (error) {\n        // Polygon details failed, continue with fallback (don't log for rate limits)\n        if (error instanceof Error && !error.message.includes('429')) {\n          console.warn(`Failed to get Polygon details for ${symbol}:`, error);\n        }\n      }\n    }\n\n    // Priority 3: Check if it's a fund/index based on security type\n    if (sector === 'Unknown') {\n      const securityCategory = this.getSecurityTypeCategory(tickerType);\n      if (securityCategory !== 'Stock') {\n        sector = securityCategory;\n      }\n    }\n\n    // Cache the result\n    this.sectorCache.set(symbol, { sector, timestamp: Date.now() });\n    return sector;\n  }\n\n  async getNews(symbol: string, limit: number = 10): Promise<any[]> {\n    return this.yahooApi.getNews(symbol, limit);\n  }\n\n  private getReadableSymbolName(symbol: string): string {\n    // Convert ticker symbol to a more readable name as fallback\n    return symbol.replace(/[^A-Z]/g, '').toUpperCase();\n  }\n\n  // Clean up company names by removing corporate suffixes for professional display\n  private cleanCompanyName(name: string): string {\n    if (!name) return name;\n    \n    // List of corporate suffixes to remove (order matters - longer ones first)\n    const suffixes = [\n      ' Corporation',\n      ' Incorporated',\n      ' Company',\n      ' Limited',\n      ' Corp.',\n      ' Corp',\n      ' Inc.',\n      ' Inc',\n      ' Ltd.',\n      ' Ltd',\n      ' Co.',\n      ' Co',\n      ' LLC',\n      ' L.P.',\n      ' LP',\n      ' PLC',\n      ' Group',\n      ' Holdings',\n      ' International',\n      ' Intl',\n      ' Systems',\n      ' Technologies',\n      ' Tech',\n      ' Solutions',\n      ' Services',\n      ' Enterprises'\n    ];\n    \n    let cleanName = name.trim();\n    \n    // Remove suffixes (case-insensitive)\n    for (const suffix of suffixes) {\n      const regex = new RegExp(`${suffix.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}$`, 'i');\n      cleanName = cleanName.replace(regex, '').trim();\n    }\n    \n    // Clean up extra spaces and commas\n    cleanName = cleanName.replace(/\\s*,\\s*$/, '').trim();\n    cleanName = cleanName.replace(/\\s+/g, ' ');\n    \n    // If we ended up with an empty string or just punctuation, return original\n    if (!cleanName || cleanName.match(/^[^a-zA-Z0-9]+$/)) {\n      return name;\n    }\n    \n    return cleanName;\n  }\n\n  private getPreviousBusinessDay(daysBack: number = 1): string {\n    const date = new Date();\n    let businessDaysBack = 0;\n    \n    while (businessDaysBack < daysBack) {\n      date.setDate(date.getDate() - 1);\n      // Skip weekends\n      if (date.getDay() !== 0 && date.getDay() !== 6) {\n        businessDaysBack++;\n      }\n    }\n    \n    return date.toISOString().split('T')[0];\n  }\n\n  private getLastTradingDay(daysBack: number = 1): string {\n    // More robust trading day calculation that can handle holidays\n    const date = new Date();\n    let tradingDaysBack = 0;\n    \n    // Common market holidays (basic implementation)\n    const holidays = [\n      '2024-01-01', '2024-01-15', '2024-02-19', '2024-03-29', '2024-05-27',\n      '2024-06-19', '2024-07-04', '2024-09-02', '2024-11-28', '2024-12-25',\n      '2025-01-01', '2025-01-20', '2025-02-17', '2025-04-18', '2025-05-26',\n      '2025-06-19', '2025-07-04', '2025-09-01', '2025-11-27', '2025-12-25'\n    ];\n    \n    while (tradingDaysBack < daysBack) {\n      date.setDate(date.getDate() - 1);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      // Skip weekends and holidays\n      if (date.getDay() !== 0 && date.getDay() !== 6 && !holidays.includes(dateStr)) {\n        tradingDaysBack++;\n      }\n    }\n    \n    return date.toISOString().split('T')[0];\n  }\n\n  // Get detailed stock information including financial metrics\n  async getDetailedStockData(symbol: string): Promise<any> {\n    console.log(`Fetching detailed data for ${symbol} using multiple Yahoo Finance sources`);\n    \n    // Try multiple Yahoo Finance endpoints for reliable data\n    const endpoints = [\n      // Primary endpoint - chart data with price ranges\n      `https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1y&includePrePost=false`,\n      // QuoteSummary endpoint for financial data including market cap and P/E\n      `https://query1.finance.yahoo.com/v10/finance/quoteSummary/${symbol}?modules=summaryDetail,defaultKeyStatistics,financialData`,\n      // Alternative endpoint for basic quote data including some financials\n      `https://query1.finance.yahoo.com/v7/finance/quote?symbols=${symbol}&crumb=ignore`,\n      // Backup quoteSummary endpoint  \n      `https://query2.finance.yahoo.com/v10/finance/quoteSummary/${symbol}?modules=summaryDetail,defaultKeyStatistics,financialData`,\n      // Backup endpoint with different structure\n      `https://query2.finance.yahoo.com/v8/finance/chart/${symbol}`\n    ];\n\n    // First, try to get Yahoo Finance data (don't return early - we'll enhance with Polygon)\n    let yahooData: any = null;\n    \n    for (const endpoint of endpoints) {\n      try {\n        console.log(`Trying endpoint: ${endpoint}`);\n        const response = await fetch(endpoint, {\n          headers: {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Accept-Encoding': 'gzip, deflate, br',\n            'Cache-Control': 'no-cache',\n            'Connection': 'keep-alive'\n          }\n        });\n\n        if (!response.ok) {\n          console.log(`Endpoint failed with status: ${response.status}`);\n          continue;\n        }\n\n        const data = await response.json();\n        console.log(`Successfully got data from: ${endpoint}`);\n\n        // Handle chart endpoint (contains basic price data)\n        if (endpoint.includes('chart')) {\n          const chart = data?.chart?.result?.[0];\n          if (chart?.meta) {\n            const meta = chart.meta;\n            yahooData = {\n              symbol: symbol.toUpperCase(),\n              name: this.cleanCompanyName(meta.longName || meta.shortName || symbol),\n              sector: 'Unknown',\n              exchange: meta.exchangeName || 'Unknown',\n              currency: meta.currency || 'USD',\n              \n              currentPrice: meta.regularMarketPrice || 0,\n              previousClose: meta.previousClose || 0,\n              change: (meta.regularMarketPrice || 0) - (meta.previousClose || 0),\n              changePercent: meta.regularMarketPrice && meta.previousClose ? \n                ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose * 100) : 0,\n              \n              dayHigh: meta.regularMarketDayHigh || null,\n              dayLow: meta.regularMarketDayLow || null,\n              fiftyTwoWeekHigh: meta.fiftyTwoWeekHigh || null,\n              fiftyTwoWeekLow: meta.fiftyTwoWeekLow || null,\n              \n              volume: meta.regularMarketVolume || 0,\n              marketCap: null, // Will be enhanced with Polygon.io\n              peRatio: null, // Will be enhanced with Polygon.io\n              \n              lastUpdated: new Date().toISOString(),\n            };\n            break; // Got Yahoo data, now enhance with Polygon\n          }\n        }\n        \n        // Handle quoteSummary endpoint (contains comprehensive financial data)\n        if (endpoint.includes('quoteSummary')) {\n          const quoteSummary = data?.quoteSummary?.result?.[0];\n          if (quoteSummary) {\n            const summaryDetail = quoteSummary.summaryDetail;\n            const defaultKeyStatistics = quoteSummary.defaultKeyStatistics;\n            const financialData = quoteSummary.financialData;\n            \n            if (summaryDetail || defaultKeyStatistics || financialData) {\n              yahooData = {\n                symbol: symbol.toUpperCase(),\n                name: this.cleanCompanyName(summaryDetail?.longName?.fmt || defaultKeyStatistics?.longName?.fmt || symbol),\n                sector: summaryDetail?.sector?.fmt || 'Unknown',\n                exchange: 'NASDAQ', // QuoteSummary doesn't always include exchange\n                currency: summaryDetail?.currency?.fmt || 'USD',\n                \n                // Price data from summaryDetail\n                currentPrice: summaryDetail?.regularMarketPrice?.raw || financialData?.currentPrice?.raw || 0,\n                previousClose: summaryDetail?.regularMarketPreviousClose?.raw || financialData?.regularMarketPreviousClose?.raw || 0,\n                change: summaryDetail?.regularMarketChange?.raw || 0,\n                changePercent: summaryDetail?.regularMarketChangePercent?.raw ? \n                  (summaryDetail.regularMarketChangePercent.raw * 100) : 0,\n                \n                // Price ranges from summaryDetail\n                dayHigh: summaryDetail?.dayHigh?.raw || null,\n                dayLow: summaryDetail?.dayLow?.raw || null,\n                fiftyTwoWeekHigh: summaryDetail?.fiftyTwoWeekHigh?.raw || null,\n                fiftyTwoWeekLow: summaryDetail?.fiftyTwoWeekLow?.raw || null,\n                \n                // Volume data\n                volume: summaryDetail?.regularMarketVolume?.raw || 0,\n                avgVolume: summaryDetail?.averageVolume?.raw || null,\n                \n                // REAL Market Cap and P/E from Yahoo Finance\n                marketCap: summaryDetail?.marketCap?.raw || defaultKeyStatistics?.marketCap?.raw || null,\n                peRatio: summaryDetail?.trailingPE?.raw || defaultKeyStatistics?.trailingPE?.raw || null,\n                \n                // Additional financial data\n                beta: defaultKeyStatistics?.beta?.raw || null,\n                eps: defaultKeyStatistics?.trailingEps?.raw || null,\n                dividendYield: summaryDetail?.dividendYield?.raw ? \n                  (summaryDetail.dividendYield.raw * 100) : null,\n                \n                lastUpdated: new Date().toISOString(),\n              };\n              break; // Got comprehensive Yahoo data\n            }\n          }\n        }\n        \n        // Handle v7 quote endpoint (may contain financial data)\n        if (endpoint.includes('/v7/finance/quote')) {\n          const quote = data?.quoteResponse?.result?.[0];\n          if (quote) {\n            yahooData = {\n              symbol: symbol.toUpperCase(),\n              name: this.cleanCompanyName(quote.longName || quote.shortName || quote.displayName || symbol),\n              sector: quote.sector || 'Unknown',\n              exchange: quote.fullExchangeName || quote.exchange || 'Unknown',\n              currency: quote.currency || 'USD',\n              \n              currentPrice: quote.regularMarketPrice || 0,\n              previousClose: quote.regularMarketPreviousClose || 0,\n              change: quote.regularMarketChange || 0,\n              changePercent: quote.regularMarketChangePercent || 0,\n              \n              dayHigh: quote.regularMarketDayHigh || null,\n              dayLow: quote.regularMarketDayLow || null,\n              fiftyTwoWeekHigh: quote.fiftyTwoWeekHigh || null,\n              fiftyTwoWeekLow: quote.fiftyTwoWeekLow || null,\n              \n              volume: quote.regularMarketVolume || 0,\n              avgVolume: quote.averageVolume || null,\n              marketCap: quote.marketCap || null, // Might have it, but enhance anyway\n              \n              peRatio: quote.trailingPE || null,\n              beta: quote.beta || null,\n              eps: quote.epsTrailingTwelveMonths || null,\n              dividendYield: quote.trailingAnnualDividendYield || null,\n              \n              lastUpdated: new Date().toISOString(),\n            };\n            break; // Got Yahoo data, now enhance with Polygon\n          }\n        }\n      } catch (error) {\n        console.error(`Error with endpoint ${endpoint}:`, error);\n        continue;\n      }\n    }\n\n    // Now ALWAYS enhance with Polygon.io data for market cap and fundamentals\n    console.log(`Enhancing ${symbol} data with Polygon.io market cap and fundamentals`);\n    try {\n      const polygonDetails = await this.polygonApi.getTickerDetails(symbol);\n      const polygonData = polygonDetails.results;\n      \n      if (polygonData && yahooData) {\n        console.log(`Got Polygon data for ${symbol}: Market Cap = ${polygonData.market_cap}`);\n        \n        // Calculate P/E ratio if we have market cap and shares outstanding  \n        let peRatio = yahooData.peRatio; // Keep Yahoo P/E if available\n        if (!peRatio && polygonData.market_cap && polygonData.weighted_shares_outstanding && yahooData.currentPrice) {\n          // Simple P/E estimation: Market Cap / (Shares * Current Price) \n          const totalShares = polygonData.weighted_shares_outstanding;\n          const currentPrice = yahooData.currentPrice;\n          if (totalShares > 0 && currentPrice > 0) {\n            const impliedEarnings = polygonData.market_cap / totalShares;\n            peRatio = Math.round(currentPrice / (impliedEarnings / totalShares) * 100) / 100 || null;\n          }\n        }\n\n        // Return COMBINED data from Yahoo Finance + Polygon.io\n        return {\n          ...yahooData, // Start with Yahoo data (prices, ranges)\n          \n          // Override with better Polygon.io data\n          name: this.cleanCompanyName(polygonData.name || yahooData.name),\n          sector: polygonData.sic_description || yahooData.sector,\n          exchange: polygonData.primary_exchange || yahooData.exchange,\n          currency: polygonData.currency_name?.toUpperCase() || yahooData.currency,\n          \n          // REAL Market Cap from Polygon.io\n          marketCap: polygonData.market_cap || yahooData.marketCap,\n          \n          // Enhanced P/E ratio \n          peRatio: peRatio,\n          \n          // Additional Polygon.io data\n          sharesOutstanding: polygonData.weighted_shares_outstanding || null,\n          employees: polygonData.total_employees || null,\n          description: polygonData.description || null,\n          \n          lastUpdated: new Date().toISOString(),\n        };\n      }\n      \n      // If only Polygon worked but not Yahoo\n      if (polygonData && !yahooData) {\n        console.log(`Only got Polygon data for ${symbol}, using as fallback`);\n        return {\n          symbol: symbol.toUpperCase(),\n          name: this.cleanCompanyName(polygonData.name || symbol),\n          sector: polygonData.sic_description || 'Unknown',\n          exchange: polygonData.primary_exchange || 'Unknown',\n          currency: polygonData.currency_name?.toUpperCase() || 'USD',\n          marketCap: polygonData.market_cap || null,\n          sharesOutstanding: polygonData.weighted_shares_outstanding || null,\n          employees: polygonData.total_employees || null,\n          description: polygonData.description || null,\n          lastUpdated: new Date().toISOString(),\n        };\n      }\n    } catch (polygonError) {\n      console.error(`Polygon.io failed for ${symbol}:`, polygonError);\n    }\n    \n    // If we got Yahoo data but Polygon failed, return Yahoo data\n    if (yahooData) {\n      console.log(`Returning Yahoo-only data for ${symbol}`);\n      return yahooData;\n    }\n\n    // Final fallback to basic Yahoo API\n    console.log(`All enhanced sources failed, trying basic fallback for ${symbol}`);\n    try {\n      const basicQuote = await this.yahooApi.getQuote(symbol);\n      if (basicQuote) {\n        return {\n          symbol: symbol.toUpperCase(),\n          name: this.cleanCompanyName(basicQuote.longName || basicQuote.shortName || symbol),\n          currentPrice: basicQuote.regularMarketPrice || 0,\n          previousClose: basicQuote.regularMarketPreviousClose || 0,\n          volume: basicQuote.regularMarketVolume || 0,\n          marketCap: basicQuote.marketCap || null,\n          lastUpdated: new Date().toISOString(),\n        };\n      }\n    } catch (fallbackError) {\n      console.error(`Final fallback also failed for ${symbol}:`, fallbackError);\n    }\n\n    console.error(`All data sources completely failed for ${symbol}`);\n    return null;\n  }\n}\n","size_bytes":36063},"server/services/yahooFinance.ts":{"content":"interface YahooQuote {\n  symbol: string;\n  longName?: string;\n  shortName?: string;\n  regularMarketPrice?: number;\n  regularMarketChange?: number;\n  regularMarketChangePercent?: number;\n  regularMarketVolume?: number;\n  marketCap?: number;\n  sector?: string;\n  industry?: string;\n}\n\ninterface YahooMarketSummary {\n  symbol: string;\n  regularMarketPrice?: number;\n  regularMarketChange?: number;\n  regularMarketChangePercent?: number;\n}\n\nexport class YahooFinanceService {\n  private readonly baseUrl = 'https://query1.finance.yahoo.com/v8/finance/chart';\n  private readonly quoteSummaryUrl = 'https://query1.finance.yahoo.com/v10/finance/quoteSummary';\n\n  async getQuote(symbol: string): Promise<YahooQuote | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/${symbol}?metrics=high?&interval=1d&range=1d`);\n      \n      if (!response.ok) {\n        throw new Error(`Yahoo Finance API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const result = data.chart?.result?.[0];\n      \n      if (!result) {\n        return null;\n      }\n\n      const meta = result.meta;\n      const currentPrice = meta.regularMarketPrice;\n      const previousClose = meta.previousClose;\n      const change = currentPrice - previousClose;\n      const changePercent = (change / previousClose) * 100;\n\n      return {\n        symbol: symbol.toUpperCase(),\n        longName: meta.longName || meta.shortName || symbol,\n        shortName: meta.shortName,\n        regularMarketPrice: currentPrice,\n        regularMarketChange: change,\n        regularMarketChangePercent: changePercent,\n        regularMarketVolume: meta.regularMarketVolume,\n        marketCap: meta.marketCap,\n      };\n    } catch (error) {\n      console.error(`Error fetching Yahoo Finance data for ${symbol}:`, error);\n      return null;\n    }\n  }\n\n  async getQuoteSummary(symbol: string): Promise<any> {\n    try {\n      const modules = 'summaryDetail,price,defaultKeyStatistics,assetProfile';\n      const response = await fetch(`${this.quoteSummaryUrl}/${symbol}?modules=${modules}`);\n      \n      if (!response.ok) {\n        throw new Error(`Yahoo Finance Quote Summary API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.quoteSummary?.result?.[0] || null;\n    } catch (error) {\n      console.error(`Error fetching Yahoo Finance quote summary for ${symbol}:`, error);\n      return null;\n    }\n  }\n\n  async getMarketSummary(): Promise<YahooMarketSummary[]> {\n    try {\n      const indices = ['^GSPC', '^IXIC', '^DJI']; // S&P 500, NASDAQ, Dow Jones\n      const promises = indices.map(async (symbol) => {\n        const quote = await this.getQuote(symbol);\n        if (quote) {\n          return {\n            symbol: symbol,\n            regularMarketPrice: quote.regularMarketPrice,\n            regularMarketChange: quote.regularMarketChange,\n            regularMarketChangePercent: quote.regularMarketChangePercent,\n          };\n        }\n        return null;\n      });\n\n      const results = await Promise.all(promises);\n      return results.filter(Boolean) as YahooMarketSummary[];\n    } catch (error) {\n      console.error('Error fetching market summary:', error);\n      return [];\n    }\n  }\n\n  // Helper method to format volume\n  formatVolume(volume: number): string {\n    if (volume >= 1_000_000_000) {\n      return `${(volume / 1_000_000_000).toFixed(1)}B`;\n    } else if (volume >= 1_000_000) {\n      return `${(volume / 1_000_000).toFixed(1)}M`;\n    } else if (volume >= 1_000) {\n      return `${(volume / 1_000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  }\n\n  // Helper method to format market cap\n  formatMarketCap(marketCap: number): string {\n    if (marketCap >= 1_000_000_000_000) {\n      return `${(marketCap / 1_000_000_000_000).toFixed(2)}T`;\n    } else if (marketCap >= 1_000_000_000) {\n      return `${(marketCap / 1_000_000_000).toFixed(2)}B`;\n    } else if (marketCap >= 1_000_000) {\n      return `${(marketCap / 1_000_000).toFixed(2)}M`;\n    }\n    return marketCap.toString();\n  }\n}\n\nexport const yahooFinanceService = new YahooFinanceService();\n","size_bytes":4118},"server/services/yahooFinanceApi.ts":{"content":"interface YahooFinanceQuote {\n  symbol: string;\n  shortName?: string;\n  longName?: string;\n  regularMarketPrice?: number;\n  regularMarketPreviousClose?: number;\n  regularMarketChange?: number;\n  regularMarketChangePercent?: number;\n  regularMarketVolume?: number;\n  marketCap?: number;\n  sector?: string;\n}\n\nexport class YahooFinanceService {\n  private baseUrl = 'https://query1.finance.yahoo.com/v8/finance/chart';\n\n  async getQuote(symbol: string): Promise<YahooFinanceQuote | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/${symbol}`);\n      if (!response.ok) {\n        throw new Error(`Yahoo Finance API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const result = data.chart?.result?.[0];\n      \n      if (!result) {\n        return null;\n      }\n\n      const meta = result.meta;\n      const quote = result.indicators?.quote?.[0];\n\n      return {\n        symbol: meta.symbol,\n        shortName: meta.shortName,\n        longName: meta.longName,\n        regularMarketPrice: meta.regularMarketPrice,\n        regularMarketPreviousClose: meta.previousClose,\n        regularMarketChange: meta.regularMarketPrice - meta.previousClose,\n        regularMarketChangePercent: ((meta.regularMarketPrice - meta.previousClose) / meta.previousClose) * 100,\n        regularMarketVolume: quote?.volume?.[0],\n        marketCap: meta.marketCap,\n        sector: meta.sector,\n      };\n    } catch (error) {\n      console.error(`Yahoo Finance error for ${symbol}:`, error);\n      return null;\n    }\n  }\n\n  async getMultipleQuotes(symbols: string[]): Promise<YahooFinanceQuote[]> {\n    const promises = symbols.map(symbol => this.getQuote(symbol));\n    const results = await Promise.allSettled(promises);\n    \n    return results\n      .map(result => result.status === 'fulfilled' ? result.value : null)\n      .filter((quote): quote is YahooFinanceQuote => quote !== null);\n  }\n\n  async searchSymbols(query: string): Promise<YahooFinanceQuote[]> {\n    try {\n      // This is a simplified search - in a real implementation, you'd use Yahoo's search API\n      const commonSymbols = [\n        'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX', 'AMD', 'CRM'\n      ];\n      \n      const matchingSymbols = commonSymbols.filter(symbol => \n        symbol.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      return this.getMultipleQuotes(matchingSymbols);\n    } catch (error) {\n      console.error('Yahoo Finance search error:', error);\n      return [];\n    }\n  }\n\n  async getNews(symbol: string, limit: number = 10): Promise<any[]> {\n    try {\n      // Yahoo Finance News API endpoint\n      const newsUrl = `https://query1.finance.yahoo.com/v7/finance/news?symbols=${symbol}&count=${limit}`;\n      const response = await fetch(newsUrl);\n      \n      if (!response.ok) {\n        throw new Error(`Yahoo Finance News API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      const articles = data.stream || [];\n\n      return articles.map((article: any) => ({\n        title: article.title || 'No Title',\n        summary: article.summary || article.excerpt || '',\n        url: article.link || article.url || '',\n        publishedAt: new Date(article.providerPublishTime * 1000).toISOString(),\n        source: article.publisher || 'Yahoo Finance',\n        thumbnail: article.thumbnail?.url || article.thumbnail || null,\n        relatedSymbols: article.relatedTickers || [symbol],\n      }));\n    } catch (error) {\n      console.error(`Yahoo Finance news error for ${symbol}:`, error);\n      \n      // Fallback: Return mock news data for development\n      return this.getMockNews(symbol, limit);\n    }\n  }\n\n  private getMockNews(symbol: string, limit: number): any[] {\n    const mockNews = [\n      {\n        title: `${symbol} Reports Strong Quarterly Earnings`,\n        summary: `${symbol} exceeded analyst expectations with robust revenue growth and improved profit margins, driven by strong demand and operational efficiency.`,\n        url: `https://finance.yahoo.com/news/${symbol.toLowerCase()}-earnings`,\n        publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n        source: 'Yahoo Finance',\n        thumbnail: null,\n        relatedSymbols: [symbol],\n      },\n      {\n        title: `Analysts Upgrade ${symbol} Price Target`,\n        summary: `Multiple investment firms have raised their price targets for ${symbol}, citing strong fundamentals and positive market outlook.`,\n        url: `https://finance.yahoo.com/news/${symbol.toLowerCase()}-analyst-upgrade`,\n        publishedAt: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), // 6 hours ago\n        source: 'MarketWatch',\n        thumbnail: null,\n        relatedSymbols: [symbol],\n      },\n      {\n        title: `${symbol} Announces Strategic Partnership`,\n        summary: `The company revealed a new partnership that is expected to expand its market reach and enhance its competitive position.`,\n        url: `https://finance.yahoo.com/news/${symbol.toLowerCase()}-partnership`,\n        publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago\n        source: 'Reuters',\n        thumbnail: null,\n        relatedSymbols: [symbol],\n      },\n    ];\n\n    return mockNews.slice(0, limit);\n  }\n}\n","size_bytes":5314},"client/src/components/Header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Shield } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function Header() {\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4 lg:px-8\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n              <Shield className=\"text-primary-foreground h-4 w-4\" />\n            </div>\n            <h1 className=\"text-xl font-bold tracking-tight\">MarketPro</h1>\n          </Link>\n          <nav className=\"hidden md:flex items-center space-x-6 text-sm font-medium\">\n            <Link href=\"/\" className=\"text-foreground/60 hover:text-foreground transition-colors\">\n              <span>Markets</span>\n            </Link>\n            <Link href=\"/\" className=\"text-foreground transition-colors\">\n              <span>Stocks</span>\n            </Link>\n            <Link href=\"/\" className=\"text-foreground/60 hover:text-foreground transition-colors\">\n              <span>Watchlist</span>\n            </Link>\n            <Link href=\"/\" className=\"text-foreground/60 hover:text-foreground transition-colors\">\n              <span>Portfolio</span>\n            </Link>\n          </nav>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n            <Badge variant=\"secondary\" className=\"text-xs font-medium\">\n              Markets Open\n            </Badge>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1885},"client/src/components/MarketOverview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingUp, TrendingDown, Radio } from \"lucide-react\";\nimport { stockApi } from \"@/lib/api\";\nimport type { MarketIndex } from \"@/types/stock\";\n\ninterface MarketOverviewProps {\n  className?: string;\n}\n\nexport function MarketOverview({ className }: MarketOverviewProps) {\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"/api/market/indices\"],\n    queryFn: () => stockApi.getMarketIndices(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (error) {\n    return (\n      <div className={`mb-8 ${className}`}>\n        <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n          <p className=\"text-destructive text-sm\">\n            Unable to load market data.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <section className={`mb-8 ${className}`}>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"market-overview-title\">\n            Market Overview\n          </h2>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {isLoading\n          ? Array.from({ length: 3 }).map((_, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Skeleton className=\"h-6 w-20\" />\n                    <Skeleton className=\"h-6 w-16\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-24\" />\n                    <div className=\"flex items-center space-x-2\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-12\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          : data?.indices.map((index: MarketIndex) => (\n              <Card key={index.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"font-semibold text-lg\" data-testid={`index-name-${index.symbol}`}>\n                      {index.name}\n                    </h3>\n                    <div className={`text-xs px-2 py-1 rounded-full ${\n                      index.changePercent >= 0\n                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'\n                        : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'\n                    }`}>\n                      {index.changePercent >= 0 ? (\n                        <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"inline w-3 h-3 mr-1\" />\n                      )}\n                      <span data-testid={`index-change-percent-${index.symbol}`}>\n                        {index.changePercent >= 0 ? '+' : ''}{index.changePercent.toFixed(2)}%\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-3xl font-bold\" data-testid={`index-value-${index.symbol}`}>\n                      {index.value.toLocaleString('en-US', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })}\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <span \n                        className={index.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}\n                        data-testid={`index-change-${index.symbol}`}\n                      >\n                        {index.change >= 0 ? '+' : ''}{index.change.toFixed(2)}\n                      </span>\n                      <span className=\"text-muted-foreground\">Today</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n        }\n      </div>\n    </section>\n  );\n}","size_bytes":4448},"client/src/components/SearchBar.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { StockSearchResult } from \"@/types/stock\";\n\nexport function SearchBar() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showResults, setShowResults] = useState(false);\n\n  const { data: searchResults, isLoading } = useQuery({\n    queryKey: ['/api/stocks/search', searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      \n      const res = await apiRequest('POST', '/api/stocks/search', { query: searchQuery });\n      return await res.json() as StockSearchResult[];\n    },\n    enabled: searchQuery.length > 2,\n  });\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setSearchQuery(value);\n    setShowResults(value.length > 0);\n  }, []);\n\n  const handleSelectStock = useCallback((stock: StockSearchResult) => {\n    setSearchQuery(stock.symbol);\n    setShowResults(false);\n    // Navigate to stock detail or add to watchlist\n    console.log('Selected stock:', stock);\n  }, []);\n\n  return (\n    <div className=\"hidden sm:flex items-center space-x-2 relative\">\n      <div className=\"relative\">\n        <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground text-sm\"></i>\n        <input \n          type=\"text\" \n          placeholder=\"Search stocks...\" \n          value={searchQuery}\n          onChange={handleSearch}\n          onFocus={() => setShowResults(searchQuery.length > 0)}\n          onBlur={() => setTimeout(() => setShowResults(false), 200)}\n          className=\"pl-10 pr-4 py-2 w-64 text-sm border border-border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n          data-testid=\"input-search\"\n        />\n        \n        {/* Search Results Dropdown */}\n        {showResults && (searchResults || isLoading) && (\n          <div className=\"absolute top-full left-0 right-0 mt-1 bg-popover border border-border rounded-md shadow-lg z-50 max-h-80 overflow-y-auto\">\n            {isLoading ? (\n              <div className=\"p-4 text-center text-muted-foreground\" data-testid=\"text-loading\">\n                <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                Searching...\n              </div>\n            ) : searchResults?.length ? (\n              <>\n                {searchResults.map((stock, index) => (\n                  <button\n                    key={`${stock.symbol}-${index}`}\n                    onClick={() => handleSelectStock(stock)}\n                    className=\"w-full px-4 py-3 text-left hover:bg-accent flex items-center justify-between border-b border-border last:border-0\"\n                    data-testid={`button-stock-${stock.symbol}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-foreground\">{stock.symbol}</div>\n                      <div className=\"text-sm text-muted-foreground truncate\">{stock.name}</div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground ml-2\">\n                      {Math.round(stock.relevanceScore * 100)}% match\n                    </div>\n                  </button>\n                ))}\n              </>\n            ) : (\n              <div className=\"p-4 text-center text-muted-foreground\" data-testid=\"text-no-results\">\n                No stocks found for \"{searchQuery}\"\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3618},"client/src/components/StockCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, Plus } from \"lucide-react\";\nimport type { Stock } from \"@/types/stock\";\n\ninterface StockCardProps {\n  stock: Stock;\n  onAddToWatchlist?: (symbol: string) => void;\n  className?: string;\n}\n\nexport function StockCard({ stock, onAddToWatchlist, className }: StockCardProps) {\n  const isPositive = stock.change >= 0;\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  return (\n    <Card className={`hover:shadow-md transition-shadow ${className}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-primary font-bold text-lg\" data-testid={`stock-symbol-${stock.symbol}`}>\n                {stock.symbol}\n              </span>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg\" data-testid={`stock-name-${stock.symbol}`}>\n                {stock.name}\n              </h3>\n              <p className=\"text-muted-foreground text-sm\" data-testid={`stock-sector-${stock.symbol}`}>\n                {stock.sector || 'Unknown'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-8\">\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\" data-testid={`stock-price-${stock.symbol}`}>\n                ${stock.currentPrice.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Current Price</div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-1\">\n                {isPositive ? (\n                  <TrendingUp className=\"text-green-600 dark:text-green-400 text-xs\" />\n                ) : (\n                  <TrendingDown className=\"text-red-600 dark:text-red-400 text-xs\" />\n                )}\n                <span \n                  className={`font-semibold ${\n                    isPositive \n                      ? 'text-green-600 dark:text-green-400' \n                      : 'text-red-600 dark:text-red-400'\n                  }`}\n                  data-testid={`stock-change-${stock.symbol}`}\n                >\n                  {isPositive ? '+' : ''}${stock.change.toFixed(2)}\n                </span>\n              </div>\n              <div \n                className={`text-sm ${\n                  isPositive \n                    ? 'text-green-600 dark:text-green-400' \n                    : 'text-red-600 dark:text-red-400'\n                }`}\n                data-testid={`stock-change-percent-${stock.symbol}`}\n              >\n                {isPositive ? '+' : ''}{stock.changePercent.toFixed(2)}%\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"font-semibold\" data-testid={`stock-volume-${stock.symbol}`}>\n                {formatVolume(stock.volume)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Volume</div>\n            </div>\n            \n            <Button \n              variant=\"secondary\" \n              size=\"sm\" \n              onClick={() => onAddToWatchlist?.(stock.symbol)}\n              className=\"flex items-center space-x-2\"\n              data-testid={`button-add-watchlist-${stock.symbol}`}\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Watch</span>\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4061},"client/src/components/StockList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Filter, ChevronDown, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { StockCard } from \"./StockCard\";\nimport { stockApi } from \"@/lib/api\";\nimport type { Stock } from \"@/types/stock\";\n\ninterface StockListProps {\n  className?: string;\n}\n\nexport function StockList({ className }: StockListProps) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState(\"marketCap\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const limit = 10;\n\n  const { \n    data: stocksData, \n    isLoading, \n    error,\n    isRefetching \n  } = useQuery({\n    queryKey: [\"/api/stocks\", currentPage, limit],\n    queryFn: () => stockApi.getStocks(currentPage, limit),\n    staleTime: 30000,\n  });\n\n  const refreshMutation = useMutation({\n    mutationFn: () => stockApi.refreshStockData(),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stocks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/market/indices\"] });\n      toast({\n        title: \"Data Refreshed\",\n        description: \"Stock data has been updated with latest information.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Unable to refresh data.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToWatchlistMutation = useMutation({\n    mutationFn: (symbol: string) => stockApi.addToWatchlist(symbol),\n    onSuccess: (_, symbol) => {\n      toast({\n        title: \"Added to Watchlist\",\n        description: `${symbol} has been added to your watchlist.`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Unable to Add\",\n        description: \"Could not add stock to watchlist.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLoadMore = () => {\n    if (stocksData?.hasMore) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const handleAddToWatchlist = (symbol: string) => {\n    addToWatchlistMutation.mutate(symbol);\n  };\n\n  const handleRefresh = () => {\n    refreshMutation.mutate();\n  };\n\n  if (error) {\n    return (\n      <div className={className}>\n        <Card className=\"bg-destructive/10 border-destructive/20\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-lg font-semibold text-destructive mb-2\">\n              Unable to Load Data\n            </h2>\n            <Button onClick={handleRefresh} variant=\"destructive\">\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Retry\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <section className={className}>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2 sm:mb-0\" data-testid=\"stock-listings-title\">\n          Stock Listings\n        </h2>\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"marketCap\">Sort by: Market Cap</SelectItem>\n              <SelectItem value=\"price\">Sort by: Price</SelectItem>\n              <SelectItem value=\"volume\">Sort by: Volume</SelectItem>\n              <SelectItem value=\"changePercent\">Sort by: Change %</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter\">\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filter\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={refreshMutation.isPending || isRefetching}\n            data-testid=\"button-refresh-data\"\n          >\n            <RefreshCw className={`w-4 h-4 ${(refreshMutation.isPending || isRefetching) ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      </div>\n\n      {/* Stock Cards */}\n      <div className=\"space-y-4\" data-testid=\"stock-list\">\n        {isLoading ? (\n          // Loading skeletons\n          Array.from({ length: limit }).map((_, index) => (\n            <Card key={index} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                  <div className=\"space-y-2 flex-1\">\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-3 w-24\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-20\" />\n                    <Skeleton className=\"h-3 w-16\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : stocksData?.stocks.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground text-lg\">\n                No stock data available. Please check your connection and try refreshing.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          stocksData?.stocks.map((stock: Stock) => (\n            <StockCard\n              key={stock.symbol}\n              stock={stock}\n              onAddToWatchlist={handleAddToWatchlist}\n            />\n          ))\n        )}\n      </div>\n\n      {/* Load More Button */}\n      {stocksData?.hasMore && (\n        <div className=\"flex justify-center mt-8\" data-testid=\"load-more-container\">\n          <Button\n            onClick={handleLoadMore}\n            disabled={isLoading}\n            className=\"flex items-center space-x-2 shadow-sm hover:shadow-md\"\n            data-testid=\"button-load-more\"\n          >\n            <span>Load More Stocks</span>\n            <ChevronDown className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      )}\n    </section>\n  );\n}\n","size_bytes":6468},"client/src/components/chart-placeholder.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { BarChart3, TrendingUp, PieChart } from \"lucide-react\";\n\ninterface ChartPlaceholderProps {\n  className?: string;\n}\n\nexport function ChartPlaceholder({ className }: ChartPlaceholderProps) {\n  return (\n    <Card className={`bg-gradient-to-br from-card to-muted/30 border-dashed ${className}`}>\n      <CardContent className=\"p-8\">\n        <div className=\"flex items-center justify-center h-64 text-muted-foreground\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center space-x-4\">\n              <BarChart3 className=\"w-8 h-8 opacity-50\" />\n              <TrendingUp className=\"w-8 h-8 opacity-50\" />\n              <PieChart className=\"w-8 h-8 opacity-50\" />\n            </div>\n            <div className=\"space-y-2\">\n              <p className=\"text-lg font-medium\">Charts</p>\n            </div>\n            <div className=\"grid grid-cols-3 gap-4 text-xs text-muted-foreground/60 max-w-sm\">\n              <div className=\"space-y-1\">\n                <div className=\"font-medium\">Charts</div>\n                <div>Candlestick</div>\n                <div>Line Charts</div>\n                <div>Volume</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"font-medium\">Indicators</div>\n                <div>Moving Avg</div>\n                <div>RSI</div>\n                <div>MACD</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"font-medium\">Analysis</div>\n                <div>Trends</div>\n                <div>Patterns</div>\n                <div>Alerts</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1790},"client/src/components/market-overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingUp, TrendingDown, Radio } from \"lucide-react\";\nimport { stockApi } from \"@/lib/api\";\nimport type { MarketIndex } from \"@/types/stock\";\n\ninterface MarketOverviewProps {\n  className?: string;\n}\n\nexport function MarketOverview({ className }: MarketOverviewProps) {\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"/api/market/indices\"],\n    queryFn: () => stockApi.getMarketIndices(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  if (error) {\n    return (\n      <div className={`mb-8 ${className}`}>\n        <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n          <p className=\"text-destructive text-sm\">\n            Failed to load market data. Please check your internet connection.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <section className={`mb-8 ${className}`}>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n        <div>\n          <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"market-overview-title\">\n            Market Overview\n          </h2>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        {isLoading\n          ? Array.from({ length: 3 }).map((_, index) => (\n              <Card key={index} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <Skeleton className=\"h-6 w-20\" />\n                    <Skeleton className=\"h-6 w-16\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-8 w-24\" />\n                    <div className=\"flex items-center space-x-2\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-12\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          : data?.indices.map((index: MarketIndex) => (\n              <Card key={index.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"font-semibold text-lg\" data-testid={`index-name-${index.symbol}`}>\n                      {index.name}\n                    </h3>\n                    <div className={`text-xs px-2 py-1 rounded-full ${\n                      index.changePercent >= 0\n                        ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'\n                        : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'\n                    }`}>\n                      {index.changePercent >= 0 ? (\n                        <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n                      ) : (\n                        <TrendingDown className=\"inline w-3 h-3 mr-1\" />\n                      )}\n                      <span data-testid={`index-change-percent-${index.symbol}`}>\n                        {index.changePercent >= 0 ? '+' : ''}{index.changePercent.toFixed(2)}%\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-3xl font-bold\" data-testid={`index-value-${index.symbol}`}>\n                      {index.value.toLocaleString('en-US', {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })}\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <span \n                        className={index.change >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}\n                        data-testid={`index-change-${index.symbol}`}\n                      >\n                        {index.change >= 0 ? '+' : ''}{index.change.toFixed(2)}\n                      </span>\n                      <span className=\"text-muted-foreground\">Today</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n        }\n      </div>\n    </section>\n  );\n}\n","size_bytes":4488},"client/src/components/stock-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown, ChevronRight } from \"lucide-react\";\nimport type { Stock } from \"@/types/stock\";\n\ninterface StockCardProps {\n  stock: Stock;\n  onClick?: (stock: Stock) => void;\n  className?: string;\n}\n\nexport function StockCard({ stock, onClick, className }: StockCardProps) {\n  const isPositive = stock.change >= 0;\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  return (\n    <Card className={`hover:shadow-md transition-shadow cursor-pointer ${className}`} onClick={() => onClick?.(stock)}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <span className=\"text-primary font-bold text-lg\" data-testid={`stock-symbol-${stock.symbol}`}>\n                {stock.symbol}\n              </span>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-lg\" data-testid={`stock-name-${stock.symbol}`}>\n                {stock.name}\n              </h3>\n              <p className=\"text-muted-foreground text-sm\" data-testid={`stock-sector-${stock.symbol}`}>\n                {stock.sector || 'Unknown'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-8\">\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold\" data-testid={`stock-price-${stock.symbol}`}>\n                ${stock.currentPrice.toFixed(2)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Current Price</div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-1\">\n                {isPositive ? (\n                  <TrendingUp className=\"text-green-600 dark:text-green-400 text-xs\" />\n                ) : (\n                  <TrendingDown className=\"text-red-600 dark:text-red-400 text-xs\" />\n                )}\n                <span \n                  className={`font-semibold ${\n                    isPositive \n                      ? 'text-green-600 dark:text-green-400' \n                      : 'text-red-600 dark:text-red-400'\n                  }`}\n                  data-testid={`stock-change-${stock.symbol}`}\n                >\n                  {isPositive ? '+' : ''}${stock.change.toFixed(2)}\n                </span>\n              </div>\n              <div \n                className={`text-sm ${\n                  isPositive \n                    ? 'text-green-600 dark:text-green-400' \n                    : 'text-red-600 dark:text-red-400'\n                }`}\n                data-testid={`stock-change-percent-${stock.symbol}`}\n              >\n                {isPositive ? '+' : ''}{stock.changePercent.toFixed(2)}%\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <div className=\"font-semibold\" data-testid={`stock-volume-${stock.symbol}`}>\n                {formatVolume(stock.volume)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Volume</div>\n            </div>\n            \n            <div className=\"hidden lg:flex items-center text-muted-foreground\">\n              <span className=\"text-sm mr-2\">View Details</span>\n              <ChevronRight className=\"w-4 h-4\" />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3905},"client/src/components/stock-chart.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface StockChartProps {\n  symbol: string;\n  currentPrice: number;\n  width?: number;\n  height?: number;\n}\n\ndeclare global {\n  interface Window {\n    TradingView: any;\n  }\n}\n\nexport function StockChart({ symbol, currentPrice, width = 700, height = 400 }: StockChartProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const widgetRef = useRef<any>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Format symbol for TradingView (most US stocks are on NASDAQ)\n  const formatSymbolForTradingView = (sym: string) => {\n    // Common exchange mappings\n    const exchangeMap: { [key: string]: string } = {\n      'AAPL': 'NASDAQ:AAPL',\n      'MSFT': 'NASDAQ:MSFT',\n      'GOOGL': 'NASDAQ:GOOGL',\n      'GOOG': 'NASDAQ:GOOG',\n      'AMZN': 'NASDAQ:AMZN',\n      'TSLA': 'NASDAQ:TSLA',\n      'META': 'NASDAQ:META',\n      'NVDA': 'NASDAQ:NVDA',\n      'NFLX': 'NASDAQ:NFLX',\n      'ORCL': 'NASDAQ:ORCL',\n      'ADBE': 'NASDAQ:ADBE',\n      'CRM': 'NYSE:CRM',\n      'PYPL': 'NASDAQ:PYPL',\n      'INTC': 'NASDAQ:INTC',\n      'CSCO': 'NASDAQ:CSCO',\n      'PEP': 'NASDAQ:PEP',\n      'KO': 'NYSE:KO',\n      'DIS': 'NYSE:DIS',\n      'VZ': 'NYSE:VZ',\n      'NKE': 'NYSE:NKE',\n      'WMT': 'NYSE:WMT',\n      'HD': 'NYSE:HD',\n      'BAC': 'NYSE:BAC',\n      'JPM': 'NYSE:JPM',\n      'V': 'NYSE:V',\n      'MA': 'NYSE:MA',\n      'JNJ': 'NYSE:JNJ',\n      'PG': 'NYSE:PG',\n      'UNH': 'NYSE:UNH',\n      'ABBV': 'NYSE:ABBV',\n      'F': 'NYSE:F',\n      'GE': 'NYSE:GE',\n      'T': 'NYSE:T',\n      'XOM': 'NYSE:XOM',\n      'CVX': 'NYSE:CVX'\n    };\n\n    // Return mapped symbol or default to NASDAQ\n    return exchangeMap[sym.toUpperCase()] || `NASDAQ:${sym.toUpperCase()}`;\n  };\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const tradingViewSymbol = formatSymbolForTradingView(symbol);\n\n    // Clear previous widget\n    if (containerRef.current) {\n      containerRef.current.innerHTML = '';\n    }\n\n    // Create widget container\n    const widgetContainer = document.createElement('div');\n    widgetContainer.className = 'tradingview-widget-container__widget';\n    widgetContainer.style.height = `${height - 50}px`;\n    widgetContainer.style.width = '100%';\n\n    // Copyright container removed for cleaner interface\n\n    containerRef.current.appendChild(widgetContainer);\n\n    // Create and configure the script\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js';\n    script.async = true;\n    \n    const config = {\n      autosize: true,\n      symbol: tradingViewSymbol,\n      interval: 'D',\n      timezone: 'America/New_York',\n      theme: 'light',\n      style: '1',\n      locale: 'en',\n      toolbar_bg: '#f1f3f6',\n      enable_publishing: false,\n      allow_symbol_change: false,\n      calendar: false,\n      hide_side_toolbar: false,\n      hide_top_toolbar: false,\n      hide_legend: false,\n      save_image: false,\n      container_id: 'tradingview_widget',\n      studies: [\n        'Volume@tv-basicstudies'\n      ],\n      show_popup_button: false,\n      popup_width: '1000',\n      popup_height: '650',\n      support_host: 'https://www.tradingview.com'\n    };\n\n    script.innerHTML = JSON.stringify(config);\n    \n    script.onload = () => {\n      setIsLoaded(true);\n    };\n\n    script.onerror = () => {\n      console.error('Failed to load TradingView widget');\n      // Fallback message\n      if (containerRef.current) {\n        containerRef.current.innerHTML = `\n          <div class=\"flex items-center justify-center h-full bg-muted/30 rounded-lg border border-dashed\">\n            <div class=\"text-center p-6\">\n              <div class=\"text-lg font-medium text-muted-foreground mb-2\">Loading...</div>\n              <div class=\"text-sm text-muted-foreground\">TradingView chart for ${symbol}</div>\n            </div>\n          </div>\n        `;\n      }\n    };\n\n    widgetContainer.appendChild(script);\n\n    // Cleanup function\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.innerHTML = '';\n      }\n      setIsLoaded(false);\n    };\n  }, [symbol, height]);\n\n  return (\n    <div \n      style={{ width: '100%', height: `${height}px` }}\n      className=\"tradingview-widget-container\"\n    >\n      {/* Loading state */}\n      {!isLoaded && (\n        <div className=\"flex items-center justify-center h-full bg-muted/10 rounded-lg border border-dashed animate-pulse\">\n          <div className=\"text-center p-6\">\n            <div className=\"text-lg font-medium text-muted-foreground mb-2\">Loading...</div>\n            <div className=\"text-sm text-muted-foreground\">Professional TradingView chart for {symbol}</div>\n          </div>\n        </div>\n      )}\n      \n      <div \n        ref={containerRef}\n        className={`w-full h-full ${!isLoaded ? 'hidden' : ''}`}\n        data-testid={`tradingview-chart-${symbol}`}\n      />\n    </div>\n  );\n}","size_bytes":4981},"client/src/components/stock-detail-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { TrendingUp, TrendingDown, DollarSign, BarChart3, Brain, Newspaper, MessageSquare, Loader2, Expand } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { stockApi } from \"@/lib/api\";\nimport { StockChart } from \"./stock-chart\";\nimport StockAIAnalysis from \"./stock-ai-analysis\";\nimport StockNews from \"./stock-news\";\nimport AIExpertChat from \"./ai-expert-chat\";\nimport type { Stock } from \"@/types/stock\";\n\ninterface StockDetailModalProps {\n  stock: Stock | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function StockDetailModal({ stock, isOpen, onClose }: StockDetailModalProps) {\n  if (!stock) return null;\n\n  const [isFullScreenChart, setIsFullScreenChart] = useState(false);\n  const [windowSize, setWindowSize] = useState({ width: 1200, height: 800 });\n  const isPositive = stock.change >= 0;\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const updateWindowSize = () => {\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      };\n      \n      updateWindowSize();\n      window.addEventListener('resize', updateWindowSize);\n      \n      return () => window.removeEventListener('resize', updateWindowSize);\n    }\n  }, []);\n\n  // Fetch detailed stock data including financial metrics\n  const { data: detailedData, isLoading: isLoadingDetails } = useQuery({\n    queryKey: [\"/api/stocks\", stock.symbol, \"details\"],\n    queryFn: () => stockApi.getStockDetails(stock.symbol),\n    staleTime: 60000, // 1 minute\n    enabled: isOpen, // Only fetch when modal is open\n  });\n\n  const formatMarketCap = (marketCap: number | null | undefined): string => {\n    if (!marketCap) return 'N/A';\n    if (marketCap >= 1e12) {\n      return `$${(marketCap / 1e12).toFixed(2)}T`;\n    } else if (marketCap >= 1e9) {\n      return `$${(marketCap / 1e9).toFixed(2)}B`;\n    } else if (marketCap >= 1e6) {\n      return `$${(marketCap / 1e6).toFixed(2)}M`;\n    }\n    return `$${marketCap.toLocaleString()}`;\n  };\n\n  const formatVolume = (volume: number): string => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"stock-detail-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <span className=\"text-primary font-bold text-lg\">{stock.symbol}</span>\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold\" data-testid={`modal-stock-name-${stock.symbol}`}>\n                  {stock.name}\n                </h2>\n                <p className=\"text-muted-foreground\">{stock.sector || 'Unknown Sector'}</p>\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"mt-6\">\n          {/* Price Overview */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                <span>Price Overview</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-3xl font-bold\" data-testid={`modal-current-price-${stock.symbol}`}>\n                    ${stock.currentPrice.toFixed(2)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Current Price</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className={`text-2xl font-bold flex items-center justify-center space-x-1 ${\n                    isPositive ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                  }`}>\n                    {isPositive ? <TrendingUp className=\"w-5 h-5\" /> : <TrendingDown className=\"w-5 h-5\" />}\n                    <span data-testid={`modal-price-change-${stock.symbol}`}>\n                      {isPositive ? '+' : ''}${stock.change.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Change</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className={`text-2xl font-bold ${\n                    isPositive ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                  }`} data-testid={`modal-change-percent-${stock.symbol}`}>\n                    {isPositive ? '+' : ''}{stock.changePercent.toFixed(2)}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Change %</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n                  <div className=\"text-2xl font-bold\" data-testid={`modal-volume-${stock.symbol}`}>\n                    {formatVolume(stock.volume)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Volume</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Information Tabs */}\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"overview\" className=\"flex items-center space-x-1\">\n                <BarChart3 className=\"w-4 h-4\" />\n                <span>Overview</span>\n              </TabsTrigger>\n              <TabsTrigger value=\"chart\">Chart</TabsTrigger>\n              <TabsTrigger value=\"ai-analysis\">AI Analysis</TabsTrigger>\n              <TabsTrigger value=\"news\">News</TabsTrigger>\n              <TabsTrigger value=\"chat\">TradeGPT</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <span>Key Metrics</span>\n                      {isLoadingDetails && <Loader2 className=\"w-4 h-4 animate-spin\" />}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Market Cap</span>\n                      <span className=\"font-medium\" data-testid={`modal-market-cap-${stock.symbol}`}>\n                        {formatMarketCap(detailedData?.marketCap || stock.marketCap)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Day High</span>\n                      <span className=\"font-medium\" data-testid={`modal-day-high-${stock.symbol}`}>\n                        {detailedData?.dayHigh ? `$${detailedData.dayHigh.toFixed(2)}` : 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Day Low</span>\n                      <span className=\"font-medium\" data-testid={`modal-day-low-${stock.symbol}`}>\n                        {detailedData?.dayLow ? `$${detailedData.dayLow.toFixed(2)}` : 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">52W High</span>\n                      <span className=\"font-medium\" data-testid={`modal-52w-high-${stock.symbol}`}>\n                        {detailedData?.fiftyTwoWeekHigh ? `$${detailedData.fiftyTwoWeekHigh.toFixed(2)}` : 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">52W Low</span>\n                      <span className=\"font-medium\" data-testid={`modal-52w-low-${stock.symbol}`}>\n                        {detailedData?.fiftyTwoWeekLow ? `$${detailedData.fiftyTwoWeekLow.toFixed(2)}` : 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">P/E Ratio</span>\n                      <span className=\"font-medium\" data-testid={`modal-pe-ratio-${stock.symbol}`}>\n                        {detailedData?.peRatio ? detailedData.peRatio.toFixed(2) : 'N/A'}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Company Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Sector</span>\n                      <Badge variant=\"secondary\">{stock.sector || 'Unknown'}</Badge>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Exchange</span>\n                      <span className=\"font-medium\">{detailedData?.exchange || 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Currency</span>\n                      <span className=\"font-medium\">{detailedData?.currency || 'USD'}</span>\n                    </div>\n                    {detailedData?.employees && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Employees</span>\n                        <span className=\"font-medium\" data-testid={`modal-employees-${stock.symbol}`}>\n                          {detailedData.employees.toLocaleString()}\n                        </span>\n                      </div>\n                    )}\n                    {detailedData?.sharesOutstanding && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Shares Outstanding</span>\n                        <span className=\"font-medium\" data-testid={`modal-shares-outstanding-${stock.symbol}`}>\n                          {(detailedData.sharesOutstanding / 1e9).toFixed(2)}B\n                        </span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n              \n              {/* Company Description */}\n              {detailedData?.description && (\n                <Card className=\"mt-4\">\n                  <CardHeader>\n                    <CardTitle>Company Overview</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground leading-relaxed\" data-testid={`modal-description-${stock.symbol}`}>\n                      {detailedData.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"chart\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <BarChart3 className=\"w-5 h-5\" />\n                      <span>Price Chart</span>\n                    </div>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => setIsFullScreenChart(true)}\n                      className=\"flex items-center space-x-1\"\n                      data-testid={`expand-chart-${stock.symbol}`}\n                    >\n                      <Expand className=\"w-4 h-4\" />\n                      <span>Full Screen</span>\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"w-full\">\n                    <StockChart\n                      symbol={stock.symbol}\n                      currentPrice={stock.currentPrice}\n                      width={700}\n                      height={400}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"ai-analysis\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Brain className=\"w-5 h-5\" />\n                    <span>AI-Powered Analysis</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <StockAIAnalysis symbol={stock.symbol} />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"news\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Newspaper className=\"w-5 h-5\" />\n                    <span>Latest News</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <StockNews symbol={stock.symbol} />\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"chat\" className=\"space-y-4\">\n              <AIExpertChat symbol={stock.symbol} />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </DialogContent>\n      \n      {/* Full Screen Chart Modal */}\n      <Dialog open={isFullScreenChart} onOpenChange={setIsFullScreenChart}>\n        <DialogContent className=\"max-w-[95vw] max-h-[95vh] w-full h-full p-2\" data-testid=\"fullscreen-chart-modal\">\n          <DialogHeader className=\"px-4 py-2\">\n            <DialogTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span>{stock.name} ({stock.symbol}) - Interactive Chart</span>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => setIsFullScreenChart(false)}\n                data-testid={`close-fullscreen-chart-${stock.symbol}`}\n              >\n                Close\n              </Button>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"flex-1 px-2 pb-2\">\n            <StockChart\n              symbol={stock.symbol}\n              currentPrice={stock.currentPrice}\n              width={Math.max(windowSize.width - 50, 800)}\n              height={Math.max(windowSize.height - 150, 500)}\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </Dialog>\n  );\n}","size_bytes":15917},"client/src/components/stock-search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Search, Brain, Loader2 } from \"lucide-react\";\nimport { stockApi } from \"@/lib/api\";\nimport { StockCard } from \"./stock-card\";\nimport type { Stock } from \"@/types/stock\";\n\ninterface StockSearchProps {\n  className?: string;\n  onStockSelect?: (stock: Stock) => void;\n}\n\nexport function StockSearch({ className, onStockSelect }: StockSearchProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n\n  // Debounce search query\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"/api/stocks/search\", debouncedQuery],\n    queryFn: async () => {\n      console.log(`Searching for: \"${debouncedQuery}\"`);\n      try {\n        const result = await stockApi.searchStocks(debouncedQuery);\n        console.log('Search result:', result);\n        return result;\n      } catch (err) {\n        console.error('Search error:', err);\n        throw err;\n      }\n    },\n    enabled: debouncedQuery.length >= 1,\n    staleTime: 30000,\n  });\n\n  return (\n    <div className={className}>\n\n      {/* Traditional Search */}\n      <div className=\"space-y-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search stocks by symbol or company name...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 pr-4 py-2 w-full\"\n            data-testid=\"input-stock-search\"\n          />\n          {isLoading && (\n            <Loader2 className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 animate-spin text-muted-foreground\" />\n          )}\n        </div>\n\n        {/* Search Results */}\n        {error && (\n          <Card className=\"bg-destructive/10 border-destructive/20\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-destructive text-sm\">\n                Unable to search stocks.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {debouncedQuery.length >= 1 && data?.stocks && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"search-results-title\">\n              Search Results ({data.stocks.length})\n            </h3>\n            \n            {data.stocks.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <p className=\"text-muted-foreground\">\n                    No stocks found for \"{debouncedQuery}\".\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {data.stocks.map((stock: Stock) => (\n                  <StockCard\n                    key={stock.symbol}\n                    stock={stock}\n                    onClick={onStockSelect}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":3433},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { StockApiResponse, MarketOverviewResponse, Stock, WatchlistItem } from \"../types/stock\";\n\nexport const stockApi = {\n  getStocks: async (page: number = 1, limit: number = 10, sortBy?: string): Promise<StockApiResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n    \n    if (sortBy) {\n      params.append('sortBy', sortBy);\n    }\n    \n    const response = await fetch(`/api/stocks?${params.toString()}`, {\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch stocks: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  getStock: async (symbol: string): Promise<Stock> => {\n    const response = await fetch(`/api/stocks/${symbol}`, {\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch stock ${symbol}: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  searchStocks: async (query: string): Promise<{ stocks: Stock[] }> => {\n    console.log(`API: Searching for \"${query}\"`);\n    \n    const response = await fetch('/api/stocks/search', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: \"include\",\n      body: JSON.stringify({ query }),\n    });\n    \n    console.log('API: Response status:', response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API: Error response:', errorText);\n      throw new Error(`Failed to search stocks: ${response.statusText}`);\n    }\n    \n    const result = await response.json();\n    console.log('API: Success result:', result);\n    return result;\n  },\n\n  getMarketIndices: async (): Promise<MarketOverviewResponse> => {\n    const response = await fetch(\"/api/market/indices\", {\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch market indices: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  refreshStockData: async (symbols?: string[]): Promise<{ message: string; count: number }> => {\n    const response = await apiRequest(\"POST\", \"/api/stocks/refresh\", { symbols });\n    return response.json();\n  },\n\n  getWatchlist: async (userId?: string): Promise<WatchlistItem[]> => {\n    const url = userId ? `/api/watchlist?userId=${userId}` : \"/api/watchlist\";\n    const response = await fetch(url, {\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch watchlist: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n\n  addToWatchlist: async (stockSymbol: string, userId?: string): Promise<WatchlistItem> => {\n    const response = await apiRequest(\"POST\", \"/api/watchlist\", { stockSymbol, userId });\n    return response.json();\n  },\n\n  removeFromWatchlist: async (symbol: string, userId?: string): Promise<{ message: string }> => {\n    const url = userId ? `/api/watchlist/${symbol}?userId=${userId}` : `/api/watchlist/${symbol}`;\n    const response = await apiRequest(\"DELETE\", url);\n    return response.json();\n  },\n\n  // Get detailed stock information with financial metrics\n  getStockDetails: async (symbol: string): Promise<any> => {\n    const response = await fetch(`/api/stocks/${symbol}/details`, {\n      credentials: \"include\",\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch stock details for ${symbol}: ${response.statusText}`);\n    }\n    \n    return response.json();\n  },\n};\n","size_bytes":3586},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/stocks.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Filter, ChevronDown, RefreshCw, Play, Pause, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MarketOverview } from \"@/components/market-overview\";\nimport { StockCard } from \"@/components/stock-card\";\nimport { StockSearch } from \"@/components/stock-search\";\nimport { StockDetailModal } from \"@/components/stock-detail-modal\";\nimport { stockApi } from \"@/lib/api\";\nimport type { Stock } from \"@/types/stock\";\n\nexport default function StocksPage() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState(\"marketCap\");\n  const [selectedStock, setSelectedStock] = useState<Stock | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [allStocks, setAllStocks] = useState<Stock[]>([]);\n  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);\n  const autoRefreshRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const limit = 10;\n\n  const { \n    data: stocksData, \n    isLoading, \n    error,\n    isRefetching \n  } = useQuery({\n    queryKey: [\"/api/stocks\", currentPage, limit, sortBy],\n    queryFn: () => stockApi.getStocks(currentPage, limit, sortBy),\n    staleTime: 30000,\n  });\n\n  // Handle data accumulation\n  useEffect(() => {\n    if (stocksData?.stocks) {\n      if (currentPage === 1) {\n        // Reset for new sort or first load\n        setAllStocks(stocksData.stocks);\n      } else {\n        // Append for load more\n        setAllStocks(prev => [...prev, ...stocksData.stocks]);\n      }\n    }\n  }, [stocksData, currentPage]);\n\n  // Auto-refresh effect with user feedback\n  useEffect(() => {\n    if (autoRefreshEnabled) {\n      autoRefreshRef.current = setInterval(() => {\n        // Silent refresh to avoid spamming users with toasts\n        queryClient.invalidateQueries({ queryKey: [\"/api/stocks\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/market/indices\"] });\n      }, 30000); // 30 seconds\n\n      return () => {\n        if (autoRefreshRef.current) {\n          clearInterval(autoRefreshRef.current);\n        }\n      };\n    } else {\n      if (autoRefreshRef.current) {\n        clearInterval(autoRefreshRef.current);\n        autoRefreshRef.current = null;\n      }\n    }\n  }, [autoRefreshEnabled, queryClient]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (autoRefreshRef.current) {\n        clearInterval(autoRefreshRef.current);\n      }\n    };\n  }, []);\n\n  const refreshMutation = useMutation({\n    mutationFn: () => stockApi.refreshStockData(),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/stocks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/market/indices\"] });\n      toast({\n        title: \"Data Refreshed\",\n        description: \"Stock data has been updated with latest information.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Refresh Failed\",\n        description: \"Unable to refresh data.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  const handleLoadMore = () => {\n    if (stocksData?.hasMore) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  // Reset to page 1 when sort changes\n  const handleSortChange = (newSortBy: string) => {\n    setSortBy(newSortBy);\n    setCurrentPage(1);\n    setAllStocks([]);\n  };\n\n  const handleStockClick = (stock: Stock) => {\n    setSelectedStock(stock);\n    setIsDetailModalOpen(true);\n  };\n\n\n  const handleRefresh = () => {\n    refreshMutation.mutate();\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <div className=\"container mx-auto px-4 lg:px-8 py-6\">\n          <Card className=\"bg-destructive/10 border-destructive/20\">\n            <CardContent className=\"p-6\">\n              <h2 className=\"text-lg font-semibold text-destructive mb-2\">\n                Unable to Load Data\n              </h2>\n              <Button onClick={handleRefresh} variant=\"destructive\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Retry\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto flex h-16 items-center justify-between px-4 lg:px-8\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n                <svg \n                  className=\"w-4 h-4 text-primary-foreground\" \n                  fill=\"currentColor\" \n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\" />\n                </svg>\n              </div>\n              <h1 className=\"text-xl font-bold tracking-tight\" data-testid=\"app-title\">\n                MarketPro\n              </h1>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Removed refresh and play buttons for cleaner production interface */}\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 lg:px-8 py-6\">\n        \n        {/* Market Overview */}\n        <MarketOverview />\n\n        {/* Search Section */}\n        <div className=\"mb-8\">\n          <StockSearch onStockSelect={handleStockClick} />\n        </div>\n\n        {/* Stock Listings Section */}\n        <section>\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n            <h2 className=\"text-2xl font-bold mb-2 sm:mb-0\" data-testid=\"stock-listings-title\">\n              Stock Listings\n            </h2>\n            <div className=\"flex flex-col sm:flex-row gap-3\">\n              <Select value={sortBy} onValueChange={handleSortChange}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"marketCap\">Sort by: Market Cap</SelectItem>\n                  <SelectItem value=\"price\">Sort by: Price</SelectItem>\n                  <SelectItem value=\"volume\">Sort by: Volume</SelectItem>\n                  <SelectItem value=\"changePercent\">Sort by: Change %</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Stock Cards */}\n          <div className=\"space-y-4\" data-testid=\"stock-list\">\n            {isLoading ? (\n              // Loading skeletons\n              Array.from({ length: limit }).map((_, index) => (\n                <Card key={index} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                      <div className=\"space-y-2 flex-1\">\n                        <Skeleton className=\"h-4 w-32\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-8 w-20\" />\n                        <Skeleton className=\"h-3 w-16\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : allStocks.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <p className=\"text-muted-foreground text-lg\">\n                    No stock data available. Please check your connection and try refreshing.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              allStocks.map((stock: Stock) => (\n                <StockCard\n                  key={stock.symbol}\n                  stock={stock}\n                  onClick={() => handleStockClick(stock)}\n                />\n              ))\n            )}\n          </div>\n\n          {/* Load More Button */}\n          {stocksData?.hasMore && (\n            <div className=\"flex justify-center mt-8\" data-testid=\"load-more-container\">\n              <Button\n                onClick={handleLoadMore}\n                disabled={isLoading}\n                className=\"flex items-center space-x-2 shadow-sm hover:shadow-md\"\n                data-testid=\"button-load-more\"\n              >\n                <span>Load More Stocks</span>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          )}\n\n\n        </section>\n      </main>\n\n      {/* Stock Detail Modal */}\n      <StockDetailModal\n        stock={selectedStock}\n        isOpen={isDetailModalOpen}\n        onClose={() => setIsDetailModalOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":9729},"client/src/types/stock.ts":{"content":"export interface Stock {\n  id: string;\n  symbol: string;\n  name: string;\n  sector?: string | null;\n  currentPrice: number;\n  previousClose: number;\n  change: number;\n  changePercent: number;\n  volume: number;\n  marketCap?: number | null;\n  lastUpdated?: Date | null;\n  isActive?: boolean | null;\n}\n\nexport interface MarketIndex {\n  id: string;\n  name: string;\n  symbol: string;\n  value: number;\n  change: number;\n  changePercent: number;\n  lastUpdated?: Date | null;\n}\n\nexport interface StockApiResponse {\n  stocks: Stock[];\n  hasMore: boolean;\n  page: number;\n  total: number;\n}\n\nexport interface MarketOverviewResponse {\n  indices: MarketIndex[];\n  lastUpdated: string;\n}\n\nexport interface WatchlistItem {\n  id: string;\n  stockSymbol: string;\n  userId?: string | null;\n  addedAt?: Date | null;\n}\n\nexport interface StockSearchResult {\n  symbol: string;\n  name: string;\n  relevanceScore: number;\n  matchReason: string;\n}\n\nexport interface StockAnalysis {\n  symbol: string;\n  sentiment: 'bullish' | 'bearish' | 'neutral';\n  confidence: number;\n  keyPoints: string[];\n  riskLevel: 'low' | 'medium' | 'high';\n  recommendation: 'buy' | 'hold' | 'sell';\n  analysisTimestamp: string; // ISO timestamp when analysis was generated\n  // Enhanced trader-focused fields\n  tradingStrategy: string;\n  entryPoints: {\n    bullish: string;\n    bearish: string;\n  };\n  priceTargets: {\n    conservative: number;\n    optimistic: number;\n    stopLoss: number;\n  };\n  technicalAnalysis: {\n    support: number;\n    resistance: number;\n    trend: 'uptrend' | 'downtrend' | 'sideways';\n    momentum: string;\n  };\n  fundamentalInsights: string[];\n  riskFactors: string[];\n  marketContext: string;\n  timeHorizon: {\n    shortTerm: string; // 1-7 days\n    mediumTerm: string; // 1-3 months\n    longTerm: string; // 6+ months\n  };\n  competitorComparison: string;\n  newsImpact: string;\n  volumeAnalysis: string;\n  reasoning: string;\n}\n\nexport interface NewsArticle {\n  title: string;\n  summary: string;\n  url: string;\n  publishedAt: string;\n  source: string;\n  thumbnail?: string;\n  relatedSymbols: string[];\n}\n\nexport interface StockNewsResponse {\n  articles: NewsArticle[];\n  symbol: string;\n  total: number;\n}\n","size_bytes":2183},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/stock-ai-analysis.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { \n  Brain, TrendingUp, TrendingDown, Minus, CheckCircle, AlertTriangle, XCircle, Target, BarChart3,\n  DollarSign, Activity, Clock, Users, Newspaper, Volume2, Lightbulb, TrendingUpDown\n} from \"lucide-react\";\nimport { StockAnalysis } from \"@/types/stock\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\n\n// Safe text formatting function to prevent XSS attacks\nfunction formatAnalysisText(text: string): React.ReactNode[] {\n  if (!text) return [];\n  \n  const lines = text.split('\\n').filter(line => line.trim() !== '');\n  \n  return lines.map((line, index) => {\n    const trimmedLine = line.trim();\n    \n    // Handle bullet points\n    if (trimmedLine.startsWith('• ')) {\n      return (\n        <div key={index} className=\"flex items-start space-x-2 mb-2\">\n          <div className=\"w-2 h-2 bg-primary rounded-full mt-1.5 flex-shrink-0\" />\n          <span className=\"text-sm\">{trimmedLine.substring(2)}</span>\n        </div>\n      );\n    }\n    \n    // Handle bold text\n    const parts = trimmedLine.split(/(\\*\\*.*?\\*\\*)/);\n    const formattedParts = parts.map((part, partIndex) => {\n      if (part.startsWith('**') && part.endsWith('**')) {\n        return <strong key={partIndex} className=\"font-semibold\">{part.slice(2, -2)}</strong>;\n      }\n      return part;\n    });\n    \n    return (\n      <div key={index} className=\"mb-2\">\n        <span className=\"text-sm\">{formattedParts}</span>\n      </div>\n    );\n  });\n}\n\ninterface StockAIAnalysisProps {\n  symbol: string;\n}\n\nconst getSentimentIcon = (sentiment: string) => {\n  switch (sentiment) {\n    case 'bullish': return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    case 'bearish': return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n    default: return <Minus className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nconst getSentimentColor = (sentiment: string) => {\n  switch (sentiment) {\n    case 'bullish': return 'text-green-600 bg-green-50 border-green-200';\n    case 'bearish': return 'text-red-600 bg-red-50 border-red-200';\n    default: return 'text-gray-600 bg-gray-50 border-gray-200';\n  }\n};\n\nconst getRiskIcon = (riskLevel: string) => {\n  switch (riskLevel) {\n    case 'low': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    case 'medium': return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n    case 'high': return <XCircle className=\"w-4 h-4 text-red-500\" />;\n    default: return <AlertTriangle className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nconst getRiskColor = (riskLevel: string) => {\n  switch (riskLevel) {\n    case 'low': return 'text-green-600 bg-green-50 border-green-200';\n    case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n    case 'high': return 'text-red-600 bg-red-50 border-red-200';\n    default: return 'text-gray-600 bg-gray-50 border-gray-200';\n  }\n};\n\nconst getRecommendationIcon = (recommendation: string) => {\n  switch (recommendation) {\n    case 'buy': return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    case 'sell': return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n    default: return <Target className=\"w-4 h-4 text-blue-500\" />;\n  }\n};\n\nconst getRecommendationColor = (recommendation: string) => {\n  switch (recommendation) {\n    case 'buy': return 'text-green-600 bg-green-50 border-green-200';\n    case 'sell': return 'text-red-600 bg-red-50 border-red-200';\n    default: return 'text-blue-600 bg-blue-50 border-blue-200';\n  }\n};\n\nconst getTrendIcon = (trend: string) => {\n  switch (trend) {\n    case 'uptrend': return <TrendingUp className=\"w-4 h-4 text-green-500\" />;\n    case 'downtrend': return <TrendingDown className=\"w-4 h-4 text-red-500\" />;\n    default: return <TrendingUpDown className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nexport default function StockAIAnalysis({ symbol }: StockAIAnalysisProps) {\n  const { data: analysis, isLoading, error } = useQuery<StockAnalysis>({\n    queryKey: [`/api/stocks/${symbol}/analysis`],\n    enabled: !!symbol,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"flex items-center space-x-3\">\n            <Brain className=\"w-6 h-6 animate-pulse text-primary\" />\n            <div className=\"text-lg font-medium\">Analyzing {symbol}...</div>\n          </div>\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"h-4 bg-muted rounded animate-pulse\" />\n          <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\" />\n          <div className=\"h-4 bg-muted rounded animate-pulse w-1/2\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert className=\"border-red-200 bg-red-50\">\n        <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n        <AlertDescription className=\"text-red-700\">\n          Unable to analyze {symbol}.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!analysis) {\n    return (\n      <div className=\"flex items-center justify-center p-8 text-muted-foreground\">\n        <div className=\"text-center space-y-2\">\n          <BarChart3 className=\"w-12 h-12 mx-auto opacity-50\" />\n          <p>No analysis available for {symbol}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"ai-analysis-content\">\n      {/* Analysis Header with Timestamp */}\n      <div className=\"flex items-center justify-between p-4 bg-primary/5 rounded-lg border border-primary/20\">\n        <div className=\"flex items-center space-x-2\">\n          <Brain className=\"w-5 h-5 text-primary\" />\n          <h3 className=\"font-semibold text-primary\">AI Expert Analysis for {symbol}</h3>\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          {analysis?.analysisTimestamp \n            ? `Generated ${new Date(analysis.analysisTimestamp).toLocaleString()}`\n            : 'Analysis in progress...'\n          }\n        </div>\n      </div>\n      \n      {/* Analysis Overview */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                {getSentimentIcon(analysis.sentiment)}\n                <span className=\"text-sm font-medium\">Sentiment</span>\n              </div>\n              <Badge className={getSentimentColor(analysis.sentiment)} data-testid={`sentiment-${analysis.sentiment}`}>\n                {analysis.sentiment}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                {getRiskIcon(analysis.riskLevel)}\n                <span className=\"text-sm font-medium\">Risk Level</span>\n              </div>\n              <Badge className={getRiskColor(analysis.riskLevel)} data-testid={`risk-${analysis.riskLevel}`}>\n                {analysis.riskLevel}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                {getRecommendationIcon(analysis.recommendation)}\n                <span className=\"text-sm font-medium\">Recommendation</span>\n              </div>\n              <Badge className={getRecommendationColor(analysis.recommendation)} data-testid={`recommendation-${analysis.recommendation}`}>\n                {analysis.recommendation.toUpperCase()}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Brain className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium\">Confidence</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-sm font-semibold\">{Math.round(analysis.confidence * 100)}%</div>\n                <Progress value={analysis.confidence * 100} className=\"flex-1 h-2\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analysis Tabs */}\n      <Tabs defaultValue=\"strategy\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"strategy\">Strategy</TabsTrigger>\n          <TabsTrigger value=\"technical\">Technical</TabsTrigger>\n          <TabsTrigger value=\"targets\">Targets</TabsTrigger>\n          <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n          <TabsTrigger value=\"insights\">Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"strategy\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Lightbulb className=\"w-5 h-5\" />\n                <span>Trading Strategy</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 bg-muted/50 rounded-lg\">\n                <div className=\"text-sm leading-relaxed\">\n                  {formatAnalysisText(analysis.tradingStrategy)}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm text-green-600\">Bullish Entry Point</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm\">\n                      {formatAnalysisText(analysis.entryPoints.bullish)}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm text-red-600\">Bearish Entry Point</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm\">\n                      {formatAnalysisText(analysis.entryPoints.bearish)}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <Target className=\"w-4 h-4\" />\n                  <span>Key Points</span>\n                </h4>\n                <ul className=\"space-y-2\">\n                  {analysis.keyPoints.map((point, index) => (\n                    <li key={index} className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                      <span className=\"text-sm\">{point}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"technical\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                <span>Technical Analysis</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-red-600\">${analysis.technicalAnalysis.support.toFixed(2)}</div>\n                      <div className=\"text-sm text-muted-foreground\">Support Level</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">${analysis.technicalAnalysis.resistance.toFixed(2)}</div>\n                      <div className=\"text-sm text-muted-foreground\">Resistance Level</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"flex items-center justify-center space-x-2 mb-1\">\n                        {getTrendIcon(analysis.technicalAnalysis.trend)}\n                        <span className=\"text-lg font-bold capitalize\">{analysis.technicalAnalysis.trend}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Current Trend</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <Activity className=\"w-4 h-4\" />\n                  <span>Momentum Analysis</span>\n                </h4>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <p className=\"text-sm\">{analysis.technicalAnalysis.momentum}</p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold flex items-center space-x-2\">\n                    <Volume2 className=\"w-4 h-4\" />\n                    <span>Volume Analysis</span>\n                  </h4>\n                  <div className=\"p-3 bg-muted/30 rounded\">\n                    <p className=\"text-sm\">{analysis.volumeAnalysis}</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-semibold flex items-center space-x-2\">\n                    <Newspaper className=\"w-4 h-4\" />\n                    <span>News Impact</span>\n                  </h4>\n                  <div className=\"p-3 bg-muted/30 rounded\">\n                    <p className=\"text-sm\">{analysis.newsImpact}</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"targets\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                <span>Price Targets & Risk Management</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Card className=\"border-green-200\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">${analysis.priceTargets.conservative.toFixed(2)}</div>\n                    <div className=\"text-sm text-muted-foreground\">Conservative Target</div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-blue-200\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">${analysis.priceTargets.optimistic.toFixed(2)}</div>\n                    <div className=\"text-sm text-muted-foreground\">Optimistic Target</div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-red-200\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">${analysis.priceTargets.stopLoss.toFixed(2)}</div>\n                    <div className=\"text-sm text-muted-foreground\">Stop Loss</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <AlertTriangle className=\"w-4 h-4\" />\n                  <span>Risk Factors</span>\n                </h4>\n                <ul className=\"space-y-2\">\n                  {analysis.riskFactors.map((risk, index) => (\n                    <li key={index} className=\"flex items-start space-x-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{risk}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  <span>Market Context</span>\n                </h4>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <p className=\"text-sm leading-relaxed\">{analysis.marketContext}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"timeline\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5\" />\n                <span>Time Horizon Analysis</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm text-orange-600\">Short Term (1-7 days)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm\">\n                      {formatAnalysisText(analysis.timeHorizon.shortTerm)}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm text-blue-600\">Medium Term (1-3 months)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm\">\n                      {formatAnalysisText(analysis.timeHorizon.mediumTerm)}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm text-purple-600\">Long Term (6+ months)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-sm\">\n                      {formatAnalysisText(analysis.timeHorizon.longTerm)}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Lightbulb className=\"w-5 h-5\" />\n                <span>Fundamental Insights & Analysis</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold\">Key Fundamental Factors</h4>\n                <ul className=\"space-y-2\">\n                  {analysis.fundamentalInsights.map((insight, index) => (\n                    <li key={index} className=\"flex items-start space-x-2\">\n                      <Lightbulb className=\"w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-sm\">{insight}</span>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>Competitor Comparison</span>\n                </h4>\n                <div className=\"p-4 bg-muted/50 rounded-lg\">\n                  <p className=\"text-sm leading-relaxed\">{analysis.competitorComparison}</p>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold flex items-center space-x-2\">\n                  <Brain className=\"w-4 h-4\" />\n                  <span>Expert Reasoning</span>\n                </h4>\n                <div className=\"p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n                  <div className=\"text-sm leading-relaxed\">\n                    {formatAnalysisText(analysis.reasoning)}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21503},"client/src/components/stock-news.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ExternalLink, Clock, User, AlertCircle, Newspaper } from \"lucide-react\";\nimport { StockNewsResponse, NewsArticle } from \"@/types/stock\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\ninterface StockNewsProps {\n  symbol: string;\n}\n\nconst formatTimeAgo = (dateString: string): string => {\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInHours / 24);\n\n  if (diffInHours < 1) {\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n    return `${diffInMinutes}m ago`;\n  } else if (diffInHours < 24) {\n    return `${diffInHours}h ago`;\n  } else if (diffInDays < 7) {\n    return `${diffInDays}d ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n};\n\nconst getSourceColor = (source: string): string => {\n  const colors: { [key: string]: string } = {\n    'Yahoo Finance': 'bg-purple-100 text-purple-800 border-purple-200',\n    'Reuters': 'bg-blue-100 text-blue-800 border-blue-200',\n    'MarketWatch': 'bg-green-100 text-green-800 border-green-200',\n    'Bloomberg': 'bg-orange-100 text-orange-800 border-orange-200',\n    'CNBC': 'bg-red-100 text-red-800 border-red-200',\n  };\n  return colors[source] || 'bg-gray-100 text-gray-800 border-gray-200';\n};\n\nexport default function StockNews({ symbol }: StockNewsProps) {\n  const { data: newsData, isLoading, error } = useQuery<StockNewsResponse>({\n    queryKey: ['/api/stocks', symbol, 'news'],\n    enabled: !!symbol,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"flex items-center space-x-3\">\n            <Newspaper className=\"w-6 h-6 animate-pulse text-primary\" />\n            <div className=\"text-lg font-medium\">Loading news...</div>\n          </div>\n        </div>\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, index) => (\n            <Card key={index} className=\"animate-pulse\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2\" />\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-muted rounded\" />\n                    <div className=\"h-3 bg-muted rounded w-5/6\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert className=\"border-red-200 bg-red-50\">\n        <AlertCircle className=\"h-4 w-4 text-red-500\" />\n        <AlertDescription className=\"text-red-700\">\n          Unable to load news.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!newsData || !newsData.articles || newsData.articles.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center p-8 text-muted-foreground\">\n        <div className=\"text-center space-y-2\">\n          <Newspaper className=\"w-12 h-12 mx-auto opacity-50\" />\n          <h3 className=\"text-lg font-medium\">No news available</h3>\n          <p className=\"text-sm\">No recent news found for {symbol}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"stock-news-content\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Newspaper className=\"w-5 h-5 text-primary\" />\n          <span className=\"font-medium\">Latest News</span>\n          <Badge variant=\"secondary\" data-testid=\"news-count\">\n            {newsData.articles.length} articles\n          </Badge>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {newsData.articles.map((article: NewsArticle, index: number) => (\n          <Card key={index} className=\"hover:shadow-md transition-shadow duration-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-3\">\n                {/* Header with time only */}\n                <div className=\"flex items-center justify-end\">\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    <span data-testid={`news-time-${index}`}>\n                      {formatTimeAgo(article.publishedAt)}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Title */}\n                <h3 \n                  className=\"text-lg font-semibold leading-tight line-clamp-2\"\n                  data-testid={`news-title-${index}`}\n                >\n                  {article.title}\n                </h3>\n\n                {/* Summary */}\n                {article.summary && (\n                  <p \n                    className=\"text-sm text-muted-foreground leading-relaxed line-clamp-3\"\n                    data-testid={`news-summary-${index}`}\n                  >\n                    {article.summary}\n                  </p>\n                )}\n\n                {/* Footer with related symbols and read more */}\n                <div className=\"flex items-center justify-between pt-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    {article.relatedSymbols && article.relatedSymbols.length > 0 && (\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"text-xs text-muted-foreground\">Related:</span>\n                        {article.relatedSymbols.slice(0, 3).map((relatedSymbol: string, idx: number) => (\n                          <Badge \n                            key={idx} \n                            variant=\"outline\" \n                            className=\"text-xs px-1 py-0\"\n                            data-testid={`related-symbol-${index}-${idx}`}\n                          >\n                            {relatedSymbol}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  \n                  {article.url && (\n                    <a\n                      href={article.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-flex items-center text-sm text-primary hover:text-primary/80 transition-colors\"\n                      data-testid={`news-link-${index}`}\n                    >\n                      Read more\n                      <ExternalLink className=\"w-3 h-3 ml-1\" />\n                    </a>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Footer removed for cleaner production interface */}\n    </div>\n  );\n}","size_bytes":7057},"client/src/components/ai-expert-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Brain, Send, User, MessageSquare } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIExpertChatProps {\n  symbol?: string;\n  className?: string;\n}\n\nexport default function AIExpertChat({ symbol, className }: AIExpertChatProps) {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      role: 'assistant',\n      content: `Hey there! 👋 I'm TradeGPT, your friendly AI trading companion! ${symbol ? `I see you're exploring ${symbol} - exciting choice! ` : ''}I love chatting about everything from quick day trades to long-term strategies. Want to talk technical analysis? Market trends? Risk management tips? Or maybe you just want to bounce some ideas off me? Fire away with any questions - I'm here to help! ✨`,\n      timestamp: new Date(),\n    }\n  ]);\n  const [input, setInput] = useState('');\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const chatMutation = useMutation({\n    mutationFn: async (userMessage: string) => {\n      const messageHistory = messages.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      \n      messageHistory.push({ role: 'user', content: userMessage });\n\n      const response = await apiRequest('POST', '/api/chat/expert', {\n        messages: messageHistory,\n        context: symbol ? { symbol } : undefined\n      });\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessages(prev => [\n        ...prev,\n        {\n          id: Date.now().toString(),\n          role: 'assistant',\n          content: data.response,\n          timestamp: new Date(),\n        }\n      ]);\n    },\n    onError: (error) => {\n      setMessages(prev => [\n        ...prev,\n        {\n          id: Date.now().toString(),\n          role: 'assistant',\n          content: 'Unable to process your request. Please try again.',\n          timestamp: new Date(),\n        }\n      ]);\n    }\n  });\n\n  const handleSend = () => {\n    if (!input.trim() || chatMutation.isPending) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate(input.trim());\n    setInput('');\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  useEffect(() => {\n    // Auto-scroll to bottom when new messages are added\n    if (scrollAreaRef.current) {\n      const viewport = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (viewport) {\n        viewport.scrollTop = viewport.scrollHeight;\n      }\n    }\n  }, [messages]);\n\n  return (\n    <Card className={`h-[600px] flex flex-col ${className}`} data-testid=\"ai-expert-chat\">\n      <CardHeader className=\"border-b\">\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Brain className=\"w-5 h-5 text-primary\" />\n          <span>TradeGPT</span>\n          {symbol && (\n            <span className=\"text-sm text-muted-foreground\">• {symbol}</span>\n          )}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        <ScrollArea ref={scrollAreaRef} className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start space-x-3 ${\n                  message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''\n                }`}\n                data-testid={`message-${message.role}-${message.id}`}\n              >\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarFallback>\n                    {message.role === 'user' ? (\n                      <User className=\"w-4 h-4\" />\n                    ) : (\n                      <Brain className=\"w-4 h-4\" />\n                    )}\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div\n                  className={`max-w-[80%] rounded-lg px-4 py-2 ${\n                    message.role === 'user'\n                      ? 'bg-primary text-primary-foreground'\n                      : 'bg-muted'\n                  }`}\n                >\n                  <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                    {message.content}\n                  </p>\n                  <div className=\"text-xs opacity-70 mt-1\">\n                    {message.timestamp.toLocaleTimeString([], { \n                      hour: '2-digit', \n                      minute: '2-digit' \n                    })}\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {chatMutation.isPending && (\n              <div className=\"flex items-start space-x-3\">\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarFallback>\n                    <Brain className=\"w-4 h-4\" />\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"bg-muted rounded-lg px-4 py-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" />\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }} />\n                      <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }} />\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">Processing...</span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n        \n        <div className=\"border-t p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Input\n              ref={inputRef}\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={`Ask about ${symbol || 'trading, stocks, market analysis'}...`}\n              disabled={chatMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"chat-input\"\n            />\n            <Button\n              onClick={handleSend}\n              disabled={!input.trim() || chatMutation.isPending}\n              size=\"sm\"\n              data-testid=\"chat-send-button\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-2 text-center\">\n            Get personalized trading advice and market insights\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7438},"client/src/components/error-boundary.tsx":{"content":"import React, { Component, ReactNode } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, RefreshCw } from 'lucide-react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onReset?: () => void;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  handleReset = () => {\n    this.setState({ hasError: false, error: undefined });\n    this.props.onReset?.();\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <Card className=\"max-w-lg mx-auto my-8 border-destructive\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-destructive\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              <span>Application Error</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              An unexpected error occurred. Please refresh the page.\n            </p>\n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"text-xs bg-muted p-3 rounded\">\n                <summary className=\"cursor-pointer\">Error Details (Development)</summary>\n                <pre className=\"mt-2 overflow-auto\">\n                  {this.state.error.stack}\n                </pre>\n              </details>\n            )}\n            <div className=\"flex space-x-2\">\n              <Button onClick={this.handleReset} className=\"flex items-center space-x-2\">\n                <RefreshCw className=\"w-4 h-4\" />\n                <span>Retry</span>\n              </Button>\n              <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                Reload Page\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":2419}},"version":1}